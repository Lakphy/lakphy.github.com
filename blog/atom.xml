<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lakphy&#39;s Blog</title>
  
  <subtitle>an Awesome place</subtitle>
  <link href="https://lakphy.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://lakphy.github.io/blog/"/>
  <updated>2022-10-26T14:48:26.870Z</updated>
  <id>https://lakphy.github.io/blog/</id>
  
  <author>
    <name>Lakphy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git学习笔记</title>
    <link href="https://lakphy.github.io/blog/2022/10/25/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lakphy.github.io/blog/2022/10/25/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-25T09:48:18.000Z</published>
    <updated>2022-10-26T14:48:26.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h1><h2 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h2><h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;logs here&quot;</span></span><br></pre></td></tr></table></figure><h3 id="修改上次提交"><a href="#修改上次提交" class="headerlink" title="修改上次提交"></a>修改上次提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h2><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [Branch Name]</span><br></pre></td></tr></table></figure><h3 id="强制修改分支位置"><a href="#强制修改分支位置" class="headerlink" title="强制修改分支位置"></a>强制修改分支位置</h3><p>强制修改 main 分支至 HEAD 往前 3 个提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f main HEAD~3</span><br></pre></td></tr></table></figure><h2 id="Git-Checkout"><a href="#Git-Checkout" class="headerlink" title="Git Checkout"></a>Git Checkout</h2><p>（检出）</p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [Branch Name]</span><br></pre></td></tr></table></figure><h3 id="分离-HEAD"><a href="#分离-HEAD" class="headerlink" title="分离 HEAD"></a>分离 HEAD</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [commit name]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [tag name]</span><br></pre></td></tr></table></figure><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [New Branch Name]</span><br></pre></td></tr></table></figure><h2 id="Git-Merge"><a href="#Git-Merge" class="headerlink" title="Git Merge"></a>Git Merge</h2><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [Another Branch Name]</span><br></pre></td></tr></table></figure><h2 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h2><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><p>将所在分支的所有提交移到另一个分支后面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase [Another Branch Name]</span><br></pre></td></tr></table></figure><h3 id="交互式-Rebase"><a href="#交互式-Rebase" class="headerlink" title="交互式 Rebase"></a>交互式 Rebase</h3><p>使用可视化界面将 HEAD 前 4 个提交手动排序和挑选</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~4</span><br></pre></td></tr></table></figure><h2 id="Git-Log"><a href="#Git-Log" class="headerlink" title="Git Log"></a>Git Log</h2><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="Git-Reset"><a href="#Git-Reset" class="headerlink" title="Git Reset"></a>Git Reset</h2><h3 id="撤销提交-回退到上-n-个提交"><a href="#撤销提交-回退到上-n-个提交" class="headerlink" title="撤销提交 - 回退到上 n 个提交"></a>撤销提交 - 回退到上 n 个提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure><h2 id="Git-Revert"><a href="#Git-Revert" class="headerlink" title="Git Revert"></a>Git Revert</h2><h3 id="撤销提交-删除本次提交内容并提交"><a href="#撤销提交-删除本次提交内容并提交" class="headerlink" title="撤销提交 - 删除本次提交内容并提交"></a>撤销提交 - 删除本次提交内容并提交</h3><p>删除 HEAD 处提交的内容并发一个新提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><h3 id="查看-HEAD-指向"><a href="#查看-HEAD-指向" class="headerlink" title="查看 HEAD 指向"></a>查看 HEAD 指向</h3><p>可以通过 <code>cat .git/HEAD</code> 查看， 如果 HEAD 指向的是一个引用，还可以用 <code>git symbolic-ref HEAD</code> 查看它的指向</p><h3 id="HEAD-位置偏移"><a href="#HEAD-位置偏移" class="headerlink" title="HEAD 位置偏移"></a>HEAD 位置偏移</h3><p><code>HEAD^</code>：向上移 1 个提交记录（多个<code>^</code>可以移多个）<br><code>HEAD~&lt;num&gt;</code>：向上移动多个提交记录，如 <code>~3</code>，<code>~</code>表示移 1 个</p><h2 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git Cherry-pick"></a>Git Cherry-pick</h2><h3 id="将其他分支的提交加在当前分支之后"><a href="#将其他分支的提交加在当前分支之后" class="headerlink" title="将其他分支的提交加在当前分支之后"></a>将其他分支的提交加在当前分支之后</h3><p>直接将其他分支的某些提交加在当前分支之后</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [commit name] [commit name] [...]</span><br></pre></td></tr></table></figure><h2 id="Git-Tag"><a href="#Git-Tag" class="headerlink" title="Git Tag"></a>Git Tag</h2><h3 id="建立标签"><a href="#建立标签" class="headerlink" title="建立标签"></a>建立标签</h3><p>在某个提交处建立 tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [tag name] [commit name]</span><br></pre></td></tr></table></figure><p>在 HEAD 处建立 tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [tag name]</span><br></pre></td></tr></table></figure><h2 id="Git-Bisect"><a href="#Git-Bisect" class="headerlink" title="Git Bisect"></a>Git Bisect</h2><p>一个查找产生 Bug 的提交记录的指令</p><h2 id="Git-Describe"><a href="#Git-Describe" class="headerlink" title="Git Describe"></a>Git Describe</h2><p>查看<code>ref</code>（向上）最近一个 tag 信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe &lt;ref&gt;</span><br></pre></td></tr></table></figure><p>输出结果形式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;_&lt;numCommits&gt;_g&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p><code>tag</code>表示的是离<code>ref</code>最近的标签<br><code>numCommits</code>表示的是这个<code>ref</code>与<code>tag</code>相差有多少个提交记录<br><code>hash</code>表示的是你所给定的<code>ref</code>所表示的提交记录哈希值的前几位</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><code>ref</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（<code>HEAD</code>）</p><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><p>远程分支命名规范：<code>&lt;remote name&gt;/&lt;branch name&gt;</code></p><p>检出(<code>checkout</code>)至远程分支时，自动进入分离 HEAD 状态，因为 git 不能直接在远程分支基础上修改</p><h2 id="Git-Clone"><a href="#Git-Clone" class="headerlink" title="Git Clone"></a>Git Clone</h2><p>拷贝远程仓库</p><h2 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h2><p>将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态，但不会改变本地的分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><h2 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h2><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><p>拉取远程分支，并将其与本地分支合并</p><p>即为先<code>fetch</code>后<code>merge</code>的缩写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="历史偏离"><a href="#历史偏离" class="headerlink" title="历史偏离"></a>历史偏离</h3><p>如果和远程仓库出现历史偏离，我们需要先 fetch，然后通过 rebase 或 merge 合并远程分支，再 push</p><p>或使用简写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>代表先 fetch 再 rebase，最后 push</p><p>或者可以更简写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h2><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。</p><p>push 之后，远程仓库将会更新，本地仓库的远程分支也会更新到本地分支对应位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>不带任何参数时的行为与 Git 的一个名为 push.default 的配置有关</p><h3 id="历史偏离-1"><a href="#历史偏离-1" class="headerlink" title="历史偏离"></a>历史偏离</h3><p>如果和远程仓库出现历史偏离，我们需要先 fetch，然后通过 rebase 或 merge 合并远程分支，再 push</p>]]></content>
    
    
    <summary type="html">git学习笔记</summary>
    
    
    
    
    <category term="git" scheme="https://lakphy.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>《SQL必知必会》学习笔记</title>
    <link href="https://lakphy.github.io/blog/2022/08/22/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lakphy.github.io/blog/2022/08/22/%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-22T07:58:10.000Z</published>
    <updated>2022-10-08T13:54:33.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h1><p><strong>数据库</strong>：保存有组织的数据的容器(通常是一个文件或一组文件)。</p><blockquote><p>我们常说的数据库软件是“数据库管理系统（DBMS）”，而非数据库，数据库是通过 DBMS 创建和操纵的容器，而具体它究竟是什么，形式如何，各种数据库都不一样。</p></blockquote><p><strong>表</strong>：某种特定类型数据的结构化清单。</p><p><strong>模式</strong>：关于数据库和表的布局及特性的信息。包括表具有一些特性，这些特性定义了数据在表中如何存储，包含存储什么 样的数据，数据如何分解，各部分信息如何命名等信息。</p><p><strong>列</strong>(column)：表中的一个字段。所有表都是由一个或多个列组成的。</p><p><strong>数据类型</strong>：所允许的数据的类型。每个表列都有相应的数据类型，它限制(或允许)该列中存储的数据。</p><p><strong>行</strong>(row)：表中的一个记录。</p><p><strong>主键</strong>(primary key)：一列(或一组列)，其值能够唯一标识表中每一行。</p><blockquote><p>提示：应当把主键作为每行必须项</p></blockquote><blockquote><p>主键条件：</p><ul><li>任意两行都不具有相同的主键值<br>每一行都必须具有一个主键值（主键列不允许有 NULL 值）<br>主键列中的值不允许修改或更新<br>主键值不能重用（如果某行从表中删除，它的主键不能赋给以后的新行）</li></ul></blockquote><p><strong>SQL</strong>：Structured Query Lanuage （结构化查询语言），是一种专门用来与数据库沟通的语言。</p><p><strong>关键字</strong>：作为 SQL 组成部分的保留字。关键字不能用作表或列的名字。</p><p><strong>SQL 语句特点</strong>：</p><ul><li>多条 SQL 语句必须以分号<code>;</code>分隔。多数 DBMS 不需要在单条 SQL 语句后加分号，但也有 DBMS 可能必须在单条 SQL 语句后加上分号。</li><li>SQL 语句不区分大小写，但多数人对 SQL 关键字大写，更易于阅读和调试。</li><li>在处理 SQL 语句时，其中所有空格都被忽略。SQL 语句可以写成长长的一行，也可以分写在多行。多数 SQL 开发人员认为，将 SQL 语句分成多行更容易阅读和调试。</li></ul><p><strong>操作符</strong>：用来联结或改变<code>WHERE</code>字句中的字句的关键字，也称为<em>逻辑操作符</em></p><p><strong>聚集函数</strong>(aggregate function)：对某些行运行的函数，计算并返回一个值。</p><h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><p>检索数据使用<code>SELECT</code>语句</p><h2 id="检索单列"><a href="#检索单列" class="headerlink" title="检索单列"></a>检索单列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h2 id="检索多列"><a href="#检索多列" class="headerlink" title="检索多列"></a>检索多列</h2><p>传入多个列名即可，列名之间用<code>,</code>分隔，但最后一个列名后面不可以加。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,class_id,id <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h2 id="检索所有列"><a href="#检索所有列" class="headerlink" title="检索所有列"></a>检索所有列</h2><p>使用通配符<code>*</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h2 id="检索不同的值"><a href="#检索不同的值" class="headerlink" title="检索不同的值"></a>检索不同的值</h2><p>使用<code>DISTINCT</code>关键字</p><p>用于指示数据库只返回不同的值，即筛选掉重复行，将会应用于所有列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> class_id</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h2 id="限制前-n-行结果"><a href="#限制前-n-行结果" class="headerlink" title="限制前 n 行结果"></a>限制前 n 行结果</h2><p><code>TOP</code>关键字限制最多返回多少行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> name</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><blockquote><p><em>对于 MySQL、MariaDB、PostgreSQL 或者 SQLite，需使用<code>LIMIT</code></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><em>对于 DB2 DBMS 的特定语句</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">FIRST</span> <span class="number">5</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><em>对于 Oracle DBMS</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="限制第-m-行开始输出-n-行结果"><a href="#限制第-m-行开始输出-n-行结果" class="headerlink" title="限制第 m 行开始输出 n 行结果"></a>限制第 m 行开始输出 n 行结果</h2><p>使用<code>OFFSET</code>关键字调整检索位移</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line">LIMIT <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>输出从第 3 行开始的 5 行数据</p><blockquote><p>行数从第<code>0</code>行开始计算</p></blockquote><blockquote><p><strong>简化版</strong><br>MySQK 和 MariaDB 支持简化版语句，例如<code>LIMIT 4 OFFSET 3</code>，即为<code>LIMIT 3,4</code></p></blockquote><h1 id="使用注释"><a href="#使用注释" class="headerlink" title="使用注释"></a>使用注释</h1><h2 id="行尾注释"><a href="#行尾注释" class="headerlink" title="行尾注释"></a>行尾注释</h2><p>在指令后面加<code>--</code>即可</p><p>多行指令也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name     <span class="comment">-- 注释1</span></span><br><span class="line"><span class="keyword">FROM</span> students   <span class="comment">-- 注释2</span></span><br><span class="line">LIMIT <span class="number">5</span>;        <span class="comment">-- 注释3</span></span><br></pre></td></tr></table></figure><h2 id="行内注释"><a href="#行内注释" class="headerlink" title="行内注释"></a>行内注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个注释</span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是一个</span></span><br><span class="line"><span class="comment">注释 */</span></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><p>使用<code>WHERE</code>语句过滤数据</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：WHERE 子句的位置<br>在同时使用<code>ORDER BY</code>和<code>WHERE</code>子句时，应当让<code>ORDER BY</code>位于<code>WHERE</code>之后，否则将会产生错误</p></blockquote><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p><code>WHERE</code>字句支持的操作符：</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!&lt;</td><td>不小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>!&gt;</td><td>不大于</td></tr><tr><td>BETWEEN AND</td><td>在两个值之间</td></tr><tr><td>IS NULL</td><td>为 NULL</td></tr></tbody></table><p>eg</p><p>小于等于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> score <span class="operator">&lt;=</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>等于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> &quot;小红&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>当比较字符串时应当使用引号</p></blockquote><p>范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><p>空值检查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><blockquote><p>NULL<br>无值，它与字段包含 0、空字符串或仅仅包含空格不同<br>检查值是否为 NULL，不可以用<code>= NULL</code>判断，只能用<code>IS NULL</code>语句</p></blockquote><h1 id="高级数据过滤"><a href="#高级数据过滤" class="headerlink" title="高级数据过滤"></a>高级数据过滤</h1><h2 id="AND操作符"><a href="#AND操作符" class="headerlink" title="AND操作符"></a><code>AND</code>操作符</h2><p>用在<code>WHERE</code>子句中的关键字，用来指示检索满足所有给定条件的行（且）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> score <span class="operator">&gt;=</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><h2 id="OR操作符"><a href="#OR操作符" class="headerlink" title="OR操作符"></a><code>OR</code>操作符</h2><p><code>WHERE</code>子句中使用的关键字，用来表示检索匹配任一给定条件的行。在部分 DBMS 里会出现逻辑短路</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;小红&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h2><p><code>AND</code>比<code>OR</code>更先运算，在使用时可以通过圆括号对操作符进行分组，控制运算顺序</p><h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a><code>IN</code>操作符</h2><p><code>IN</code>用于<code>WHERE</code>子句中用来指定要匹配值的清单的关键字，功能与<code>OR</code>相当。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><code>IN</code>操作符与<code>OR</code>类似</p><p>下面为等价代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> class_id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">OR</span> class_id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a><code>NOT</code>操作符</h2><p><code>WHERE</code>子句中用来否定其后条件的关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, id, class_id, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> class_id <span class="operator">=</span> <span class="number">1</span> ;</span><br></pre></td></tr></table></figure><h1 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a>用通配符进行过滤</h1><h2 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a><code>LIKE</code>操作符</h2><p><strong>通配符</strong>：用来匹配值的一部分特殊字符</p><p><strong>搜索模式</strong>：由字面值、通配符或两者组合构成的搜索条件</p><p><strong>谓词</strong>：从技术上说，<code>LIKE</code>是谓词而不是操作符</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="%通配符"></a><code>%</code>通配符</h3><p>表示任意字符出现任意次数（包括 0 次）（在 MS Access 中，通配符为<code>*</code>）</p><p>筛选李姓的同学</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>LIKE</code>搜索区分大小写</p></blockquote><blockquote><p>空格问题：<br>在 MS Access 等 DBMS 中，会在字段内容尾部填补空格，所以像<code>WHERE name LIKE &#39;F%y&#39;</code>的语句，匹配以 y 结尾的数据时，无法匹配到尾部补全空格的数据，解决办法是使用<code>&#39;F%y%&#39;</code></p></blockquote><blockquote><p>NULL 问题<br><code>WHERE name LIKE &#39;%&#39;</code>不会匹配 NULL</p></blockquote><h3 id="通配符-1"><a href="#通配符-1" class="headerlink" title="_通配符"></a><code>_</code>通配符</h3><p>用于匹配单个字符</p><blockquote><p>DB2 不支持<code>_</code>通配符</p></blockquote><blockquote><p>在 MS Access 中应使用<code>?</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;__ inch teddy bear&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="通配符-2"><a href="#通配符-2" class="headerlink" title="[]通配符"></a><code>[]</code>通配符</h3><p>表示匹配方括号内的任意一个字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">&#x27;[JM]%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact;</span><br></pre></td></tr></table></figure><blockquote><p>只有 MS Access 和 SQL Server 支持<code>[]</code></p></blockquote><p><strong>否定方法</strong>：方括号里面加<code>^</code>前缀表示否定，例如<code>[^JM]</code>表示匹配除 J、M 以外的字符</p><blockquote><p>在 MS Access 中，应将<code>^</code>替换为<code>!</code>使用，即<code>[^JM]</code>换为<code>[!JM]</code></p></blockquote><p>也可以使用<code>NOT</code>来否定</p><h1 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h1><p><strong>字段</strong>：基本上与列的意思相同</p><h2 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h2><p><strong>拼接</strong>：将值联结到一起构成单个值。</p><p>可以使用一个特殊的操作符用来拼接两个列</p><ul><li><code>+</code>加号：MS Access、SQL Server（多数 DBMS 使用此方法）</li><li><code>||</code>两个竖杠：DB2、Oracle、PostgreSQL、SQLite、Open Office Base</li></ul><p>样例代码拼接了名称和国家，并在国家两边加了括号</p><p>使用<code>+</code>的样例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name <span class="operator">+</span> <span class="string">&#x27; (&#x27;</span> <span class="operator">+</span> vend_country <span class="operator">+</span> <span class="string">&#x27;)&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure><p>使用<code>||</code>的样例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name <span class="operator">||</span> <span class="string">&#x27; (&#x27;</span> <span class="operator">||</span> vend_country <span class="operator">||</span> <span class="string">&#x27;)&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure><blockquote><p>在 MySQL 或 MariaDB 中需要使用的语句有所不同</p><p>使用 <code>Concat()</code>函数完成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name, <span class="string">&#x27; (&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure></blockquote><p>在上述代码中，有的 DBMS 会将字段用空格填充使其宽度保持一致，而我们并不需要空格，可以使用 SQL 的<code>RTRIM()</code>函数完成</p><p>以<code>+</code>形式代码为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RTRIM(vend_name) <span class="operator">+</span> <span class="string">&#x27; (&#x27;</span> <span class="operator">+</span> RTRIM(vend_country) <span class="operator">+</span> <span class="string">&#x27;)&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure><blockquote><p>TRIM 函数<br><code>RTRIM()</code>：去掉右边空格<br><code>LTRIM()</code>：去掉左边空格<br><code>TRIM()</code>：去掉左右两边空格</p></blockquote><h2 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h2><p>拼接后的字符串需要有一个名字才能正常用于客户端，所以可以给拼接后字符串起一个别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RTRIM(vend_name) <span class="operator">+</span> <span class="string">&#x27; (&#x27;</span> <span class="operator">+</span> RTRIM(vend_country) <span class="operator">+</span> <span class="string">&#x27;)&#x27;</span> <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br></pre></td></tr></table></figure><p>即 在<code>Select</code>后的表达式后面加上 <code>AS title</code></p><p>建议在使用拼接字符串后最好加一个<code>AS</code></p><p><strong>别名</strong>有时也称为<strong>导出列</strong></p><h2 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h2><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p>这段代码输出了<code>order_num = 20008</code>的数据，并且每行数据加一个<code>expanded_price</code>字段显示<code>quantity * item_price</code>值</p><p>支持的算数操作符：</p><ul><li><code>+</code></li><li><code>-</code></li><li><code>*</code></li><li><code>/</code></li></ul><blockquote><p><strong>测试计算表达式</strong><br>虽然<code>SELECT</code>常用于检索数据，但如果省略<code>FROM</code>字句，则用与简单的访问和处理表达式<br>例如：</p><ul><li><code>SELECT 3 * 2</code>将返回<code>6</code></li><li><code>SELECT Trim(&#39; abc &#39;)</code>将返回<code>abc</code></li><li><code>SELECT Now()</code>将返回当前日期和时间</li></ul></blockquote><h1 id="使用函数处理数据"><a href="#使用函数处理数据" class="headerlink" title="使用函数处理数据"></a>使用函数处理数据</h1><h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><p><code>RTRIM()</code>：去掉字符串右边空格<br><code>LTRIM()</code>：去掉字符串左边空格<br><code>TRIM()</code>：去掉字符串左右两边空格</p><p><code>UPPER()</code>：将字符串转换为大写（在 MS Access 中使用<code>UCASE()</code>）<br><code>LOWER()</code>：将字符串转换为小写（在 MS Access 中使用<code>LCASE()</code>）</p><p><code>LEFT()</code>：返回字符串左边的字符<br><code>RIGHT()</code>：返回字符串右边的字符</p><p><code>LENGTH()</code>、<code>DATALENGTH()</code>、<code>LEN()</code>：返回字符串的长度</p><p><code>SOUNDEX()</code>：返回字符串的 SOUNDEX 值。</p><blockquote><p><strong>关于 SOUNDEX</strong><br>SOUNDEX 是一个将任何文本串转换为描述其语音表示的字母数字模式的算法，SOUNDEX 考虑了类似的发音音符和音节，使得能对字符串进行发音比较而不是字母比较。<br>多数 DBMS 都提供对 SOUNDEX 的支持。MS Access 和 PostgreSQL 不支持<code>SOUNDEX()</code>。<br>如果在创建 SQLite 时使用了 SQLITE_SOUNDEX 编译时选项，那么<code>SOUNDEX()</code>在 SQLite 中就可用，因为 SQLITE_SOUNDEX 不是默认选项，所以多数 SQLite 实现不支持<code>SOUNDEX()</code></p><p>使用 SOUNDEX 可以匹配发音相同的单词，在拼错时很有用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(cust_contact) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;Michael Green&#x27;</span>);</span><br></pre></td></tr></table></figure><p>（查询到<code>Michelle Green</code>的字段）</p></blockquote><h2 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h2><p>不同的 DBMS 都有自己特殊的日期和时间处理函数</p><p>举例：<br><code>Orders</code>表中包含的订单都有订单日期，检索 2012 年的所有订单</p><p><strong>SQL Server 和 Sybase</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> DATEPART(yy, order_date) <span class="operator">=</span> <span class="number">2012</span>;</span><br></pre></td></tr></table></figure><p><strong>MS Access</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> DATEPART(<span class="string">&#x27;yyyy&#x27;</span>, order_date) <span class="operator">=</span> <span class="number">2012</span>;</span><br></pre></td></tr></table></figure><p>通过上面的两个例子，可以看出<code>DATEPART()</code>函数接收两个参数，分别是返回的成分标识和从中返回成分的日期</p><p>类似的例子：<br><strong>PostgreSQL</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Order</span></span><br><span class="line"><span class="keyword">WHERE</span> DATE_PART(<span class="string">&#x27;year&#x27;</span>, order_date) <span class="operator">=</span> <span class="number">2012</span>;</span><br></pre></td></tr></table></figure><p><strong>Oracle</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> to_number(to_char(order_date, <span class="string">&#x27;YYYY&#x27;</span>)) <span class="operator">=</span> <span class="number">2012</span>;</span><br></pre></td></tr></table></figure><p>这里<code>to_char</code>函数用于提取日期的成分，<code>to_number</code>函数用于将提取出来的成分转为数值，以便与 2012 进行比较</p><p>也可以使用<code>BETWEEN</code>操作符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_date</span><br><span class="line"><span class="keyword">BETWEEN</span> to_date(<span class="string">&#x27;01-01-2012&#x27;</span>) <span class="keyword">AND</span> to_date(<span class="string">&#x27;12-31-2012&#x27;</span>);</span><br></pre></td></tr></table></figure><p>使用<code>BETWEEN</code>判断时间区间</p><p>此代码在 SQL Server 中不起作用，因为其不支持<code>to_date</code>函数</p><p><strong>MySQL 和 MariaDB</strong></p><p>MySQL 和 MariaDB 没有<code>DATEPART()</code>函数，但可以使用<code>YEAR()</code>函数提取年份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(order_date) <span class="operator">=</span> <span class="number">2012</span>;</span><br></pre></td></tr></table></figure><p><strong>SQLite</strong></p><p>在 SQLite 中有一个小技巧，可以直接用<code>strftime()</code>时间格式化函数提取年份比较</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> strftime(<span class="string">&#x27;%Y&#x27;</span>, order_date) <span class="operator">=</span> <span class="string">&#x27;2012&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>ABS()</code></td><td>返回一个数的绝对值</td></tr><tr><td><code>COS()</code></td><td>返回一个角度的余弦</td></tr><tr><td><code>EXP()</code></td><td>返回一个数的指数值</td></tr><tr><td><code>PI()</code></td><td>返回圆周率</td></tr><tr><td><code>SIN()</code></td><td>返回一个角度的正弦</td></tr><tr><td><code>SQRT()</code></td><td>返回一个数的平方根</td></tr><tr><td><code>TAN()</code></td><td>返回一个角度的正切</td></tr></tbody></table><h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><p>用于汇总表中的数据，而不需要数据本身。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>返回某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>返回某列的行数</td></tr><tr><td><code>MAX()</code></td><td>返回某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>返回某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>返回某列值之和</td></tr></tbody></table><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p>计算 prod_price 的平均值，并以 avg_price 别名返回。</p><blockquote><p><strong>注意</strong></p><ul><li><code>AVG()</code>只能用于单个列</li><li>会自动忽略值为 NULL 的行</li></ul></blockquote><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h3><p>有两种使用方式：</p><ul><li><p><code>COUNT(*)</code>对表中行的数目进行技术，不管列中是否包含 NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust</span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure></li><li><p><code>COUNT(column)</code>对特定列中具有值的行进行计数，并且忽略 NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust</span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure></li></ul><h3 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h3><p>返回指定列中的最大值，需要指定列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p>该函数同样也忽略 NULL 值。</p><h3 id="MIN"><a href="#MIN" class="headerlink" title="MIN()"></a>MIN()</h3><p>返回指定列中的最小值，需要指定列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> min_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p>该函数同样也忽略 NULL 值。</p><h3 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h3><p>返回指定列值的和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_ordered</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p>也可以在其中使用表达式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(item_price<span class="operator">*</span>quantity) <span class="keyword">AS</span> total_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p>该函数同样也忽略 NULL 值。</p><h2 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h2><p>所有聚集函数都可以有如下两种用法：</p><ul><li><code>ALL</code>（默认）：对所有行操作（无需指定，默认行为）</li><li><code>DISTINCT</code>：只包含不同的值（需要用<code>DISTINCT</code>指定）</li></ul><blockquote><p><strong>MS Access</strong>中不支持<code>DISTINCT</code>，要实现类似结果，需要将<code>DISTINCT</code>数据返回到外部<code>SELECT COUNT(*)</code>语句。</p></blockquote><p>下面的例子只计算了不同数据的平均值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>**在<code>COUNT</code>中使用<code>DISTINCT</code>**时必须指定列名（<code>COUNT(column)</code>）不能用于计算或表达式。</p></blockquote><blockquote><p>部分 DBMS 还支持其他聚集参数，如支持对查询结果的子集进行计算的<code>TOP</code>和<code>TOP PERCENT</code>。</p></blockquote><h2 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h2><p><code>SELECT</code>语句可根据需要包含多个聚集函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items,</span><br><span class="line">       <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</span><br><span class="line">       <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</span><br><span class="line">       <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg</span><br><span class="line"> <span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><h2 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</span><br></pre></td></tr></table></figure><p>上例表示计算不同<code>vend_id</code>对应的<code>num_prods</code>的总和。</p><p><strong><code>GROUP BY</code>的一些规定：</strong></p><ul><li><code>GROUP BY</code>子句可以包含任意数目的列，因而可以对分组进行嵌套， 更细致地进行数据分组。</li><li>如果在<code>GROUP BY</code>子句中嵌套了分组，数据将在最后指定的分组上进行汇总</li><li><code>GROUP BY</code>子句中列出的每一列都必须事检索列或有效的表达式（但不能是聚集函数）。如果在<code>SELECT</code>中使用表达式，则必须在<code>GROUP BY</code>子句中指定相同的表达式。不能使用别名。</li><li>大多数 SQL 实现不允许<code>GROUP BY</code>列带有长度可变的数据类型（如文本或备注型字段）。</li><li>除聚集计算语句外，<code>SELECT</code>语句中的每一列都必须在<code>GROUP BY</code>子句中给出。</li><li><code>GROUP BY</code>子句必须出现在<code>WHERE</code>子句之后，<code>ORDER BY</code>子句之前。</li></ul><blockquote><p><strong><code>ALL</code>子句</strong></p><p>MS SQL Server 等 SQL 实现 在<code>GROUP BY</code>中支持可选<code>ALL</code>子句，这个子句可用来返回所有分组，即使没有匹配行的分组也返回 NULL。</p></blockquote><h2 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h2>]]></content>
    
    
    <summary type="html">《SQL必知必会》学习笔记</summary>
    
    
    
    
    <category term="SQL" scheme="https://lakphy.github.io/blog/tags/SQL/"/>
    
    <category term="数据库" scheme="https://lakphy.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redux Fundamentals 学习笔记</title>
    <link href="https://lakphy.github.io/blog/2022/08/21/Redux-Fundamentals-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lakphy.github.io/blog/2022/08/21/Redux-Fundamentals-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-20T16:41:24.000Z</published>
    <updated>2022-08-22T16:46:11.464Z</updated>
    
    <content type="html"><![CDATA[<p>之前读了 Redux Essentials 文档，感觉就是个大杂烩，遇事不决加个包，引用了一大堆 Redux 生态工具，虽说这么做没毛病，而且 RTK 都会帮我做好，但是这样使我们离 Redux 的核心越来越远，就像一个无情的调库调参侠，没有任何意义，如果都是调参的话，就远离了我学 Redux 的初衷：学习其中的编程思想。</p><p>所以接下来就是 Redux 对于纯 Redux 的文档 —— Redux Fundamentals 的学习笔记</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a><code>store</code>对象</h2><p>store 是 Redux 存储对象，包含了一系列 Redux 数据和函数</p><p>特点：</p><ul><li>不可以直接更改其中数据</li><li>修改数据的唯一方法是创建一个<code>action</code>对象(用于表示发生的事件)，然后<code>dispatch</code>它，告诉<code>store</code>发生了什么</li><li>当<code>dispatch</code>一个<code>action</code>对象时，<code>store</code>会执行<code>reducer</code>函数，根据<code>action</code>对象和和<code>store</code>中存储的旧状态计算出新的状态</li><li><code>store</code>会被修改后会通知<code>subscribers</code>（订阅组件）状态发生改变，使其产生对应的 UI 重新渲染</li></ul><p>可以通过<a href="#createStore%E5%87%BD%E6%95%B0"><code>createStore</code>函数</a>来创建 store 对象</p><h3 id="store-getState-函数"><a href="#store-getState-函数" class="headerlink" title="store.getState()函数"></a><code>store.getState()</code>函数</h3><p>用于获取 store 中存储的状态对象</p><p><strong>参数</strong></p><p>无参数</p><p><strong>返回值</strong></p><p>store 中存储的状态对象</p><h3 id="store-subscribe-函数"><a href="#store-subscribe-函数" class="headerlink" title="store.subscribe()函数"></a><code>store.subscribe()</code>函数</h3><p>用于订阅数据更新</p><p><strong>参数</strong></p><p>需要订阅的函数，当状态更新时，订阅了的函数会被执行</p><p><strong>返回值</strong></p><p>无返回值</p><h3 id="store-dispatch-函数"><a href="#store-dispatch-函数" class="headerlink" title="store.dispatch()函数"></a><code>store.dispatch()</code>函数</h3><p>用于 dispatch action</p><p><strong>参数</strong></p><p><a href="#action%E5%AF%B9%E8%B1%A1">action 对象</a></p><p><strong>返回值</strong></p><p>无返回值</p><h2 id="reducer函数"><a href="#reducer函数" class="headerlink" title="reducer函数"></a><code>reducer</code>函数</h2><p><strong>参数</strong></p><ul><li><code>state</code>：store 中存储的前一个状态，使用时通常还会设置其默认值<code>state = initialState</code></li><li><code>action</code>：action 对象，用于表示发生的事件</li></ul><p><strong>返回值</strong></p><p>返回一个更新后新的状态，如果没有修改，可以直接返回原状态</p><blockquote><p>注意在 reducer 中我们应当返回一个新的状态，或者直接返回原状态，不可以尝试去修改原状态对象</p></blockquote><h2 id="action对象"><a href="#action对象" class="headerlink" title="action对象"></a><code>action</code>对象</h2><p>用于表示发生的事件，通常为以下格式：</p><ul><li><code>type</code>：发生事件类型，字符串，必须为可读性标志性较强的一串字符，通常为<code>xxx/xxx</code>格式来表示，前半部分表示某一状态，后半部分为这个状态发生的事件名</li></ul><h1 id="基本-API"><a href="#基本-API" class="headerlink" title="基本 API"></a>基本 API</h1><h2 id="createStore函数"><a href="#createStore函数" class="headerlink" title="createStore函数"></a><code>createStore</code>函数</h2><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(counterReducer);</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>reducer 函数</li></ul><p><strong>返回值</strong></p><p><a href="#store%E5%AF%B9%E8%B1%A1">store 对象</a></p><h1 id="数据工作流"><a href="#数据工作流" class="headerlink" title="数据工作流"></a>数据工作流</h1><ul><li>dispatch action</li><li>reducer 根据 action 和先前的 state 计算出新的 state</li><li>UI 根据新的 state 重新渲染</li></ul><p>引用一个官方文档的图</p><p><img src="https://d33wubrfki0l68.cloudfront.net/01cc198232551a7e180f4e9e327b5ab22d9d14e7/b33f4/assets/images/reduxdataflowdiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" alt="Redux Data Flow"></p>]]></content>
    
    
    <summary type="html">Redux Fundamentals 学习笔记</summary>
    
    
    
    
    <category term="Redux" scheme="https://lakphy.github.io/blog/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>使用一些CSS手段避免用户产生预期之外的操作</title>
    <link href="https://lakphy.github.io/blog/2022/08/07/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%BA%9BCSS%E6%89%8B%E6%AE%B5%E9%81%BF%E5%85%8D%E7%94%A8%E6%88%B7%E4%BA%A7%E7%94%9F%E9%A2%84%E6%9C%9F%E4%B9%8B%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://lakphy.github.io/blog/2022/08/07/%E4%BD%BF%E7%94%A8%E4%B8%80%E4%BA%9BCSS%E6%89%8B%E6%AE%B5%E9%81%BF%E5%85%8D%E7%94%A8%E6%88%B7%E4%BA%A7%E7%94%9F%E9%A2%84%E6%9C%9F%E4%B9%8B%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C/</id>
    <published>2022-08-07T14:46:57.000Z</published>
    <updated>2022-08-07T14:56:57.396Z</updated>
    
    <content type="html"><![CDATA[<p>在制作演示类网站或是一些官网时，用户可能会进行一些预期之外不可控的操作，导致某些画面穿帮或者影响用户体验，比如说：</p><ul><li>随意拖动演示图片</li><li>选中文字</li></ul><p>或者我们写了一个 div，但希望用户将鼠标悬浮时可以出现一个小手提示用户这里可以点。</p><p>接下来介绍一些 CSS 手段处理这些常见问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user-select: none;</span><br></pre></td></tr></table></figure><p>禁止用户选中文字</p><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-user-drag: none;</span><br></pre></td></tr></table></figure><p>禁止用户拖动图片（仅在 webkit 生效）</p><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: pointer;</span><br></pre></td></tr></table></figure><p>鼠标悬浮时变为小手（可点击提示）</p><hr>]]></content>
    
    
    <summary type="html">使用一些CSS手段避免用户产生预期之外的操作</summary>
    
    
    
    
    <category term="CSS" scheme="https://lakphy.github.io/blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>一段逆天的js代码</title>
    <link href="https://lakphy.github.io/blog/2022/08/01/%E4%B8%80%E6%AE%B5%E9%80%86%E5%A4%A9%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>https://lakphy.github.io/blog/2022/08/01/%E4%B8%80%E6%AE%B5%E9%80%86%E5%A4%A9%E7%9A%84js%E4%BB%A3%E7%A0%81/</id>
    <published>2022-08-01T10:03:28.000Z</published>
    <updated>2022-08-01T14:19:00.662Z</updated>
    
    <content type="html"><![CDATA[<p>从学长那里看到一段逆天的 js 代码，代码不长，但考察了很多知识点。</p><p>上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">i, j</span>) &#123;</span><br><span class="line">  sum += <span class="keyword">await</span> (i + j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = j = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++, j++) &#123;</span><br><span class="line">  p.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">add</span>(i, j);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码考察了很多知识点，哪怕一个知识点答错，都答不出正确答案</p><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>不懂这段代码的话，我们可以先在浏览器 devtool 中调试一下：</p><p><img src="1.gif" alt="devtool调试"></p><h2 id="逐步解释"><a href="#逐步解释" class="headerlink" title="逐步解释"></a>逐步解释</h2><p>接下来我来按语句执行顺序解释整个执行过程：</p><blockquote><p>在开始之前我们要先明确一个事情：JS 是单线程的</p></blockquote><p>🔴 首先声明语句暂时不解释</p><p>🔴 首先看<code>setTimeout</code>这里，这条语句很简单，字面意思就是 0 秒后输出<code>sum</code>，但由于 js 单线程的特性，这条语句的意思就是“当前任务结束后输出<code>sum</code>”，也就是把要执行的代码暂时挂起。</p><p>🔴 接下来看到<code>for</code>，重点放在括号内的声明<code>let i = j = 0</code>，请注意这个语句并不是声明了“两个作用域在 for 循环内的变量”。</p><p>这条语句做了两件事：</p><ul><li>将<code>0</code>赋给<code>j</code>，但因为<code>j</code>未声明，所以自动在全局（Global）声明了一个<code>j</code>变量。</li><li>用<code>let</code>声明了一个作用域在 for 循环内的变量，并将表达式<code>j = 0</code>的返回值（即<code>0</code>）赋给<code>i</code></li></ul><p>在 devtool 的调试中可以很明显的看到<code>i</code>和<code>j</code>的声明位置不同</p><p>所以说这里的<code>i</code>是局部变量，for 循环结束即销毁，而<code>j</code>却是全局变量</p><p>🔴 接下来看 for 循环内的语句<code>p.then()</code></p><p>先不管 then 里面干了啥，先看这个<code>p.then()</code>有什么目的。看看前面的声明语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br></pre></td></tr></table></figure><p>那拼起来就是<code>Promise.resolve().then()</code>，熟悉异步的同学就能看出来，这段代码的意思和之前<code>setTimeout</code>那里一样，就是将 then 里面代码暂时挂起，待当前任务结束后执行。</p><blockquote><p>这里还需注意一个问题：<strong>执行时机</strong></p><p><code>Promise</code>会比<code>setTimeout</code>更先执行，<a href="https://juejin.cn/post/6844903607276437517">详情</a></p></blockquote><p>🔴 再看 then 里面的代码<code>() =&gt; &#123; add(i, j); &#125;</code>，就是调用一个<code>add()</code>函数，干了什么先不考虑</p><p>🔴 那合起来我们就可以理解整个 for 循环做了什么事：</p><p>循环了三次，挂起了三个<code>() =&gt; &#123; add(i, j); &#125;</code>。</p><p>由于<code>add()</code>是外部的一个函数，而<code>i</code>的作用域仅在 for 循环内，这里就产生了一个闭包，而在 同一位置 不同方式 声明的<code>j</code>，被默认定义在了全局（Global），因此不会出现闭包。</p><p>因此我们可以列一个表记录 for 循环结束后代码所挂起的三个任务以及他们闭包内可以获取到的参数：</p><p>（因为三个任务都不是立即执行，所以执行时获取到的 j 一定为代码执行时 j 的值，即 for 循环结束后的终止）</p><table><thead><tr><th>顺序</th><th>任务</th><th>i</th><th>j</th></tr></thead><tbody><tr><td>1</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>0</td><td>3（Global）</td></tr><tr><td>2</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>1</td><td>3（Global）</td></tr><tr><td>3</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>2</td><td>3（Global）</td></tr></tbody></table><p>循环结束后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="literal">undefined</span>;</span><br><span class="line">j = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>🔴 接下来代码运行结束，开始执行之前挂起的任务</p><p>之前说过<code>Promise</code>会比<code>setTimeout</code>更先执行，所以挂起任务的执行顺序为：</p><table><thead><tr><th>顺序</th><th>任务</th><th>闭包变量</th><th>全局变量</th></tr></thead><tbody><tr><td>1</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 0</td><td>j</td></tr><tr><td>2</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 1</td><td>j</td></tr><tr><td>3</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 2</td><td>j</td></tr><tr><td>4</td><td><code>() =&gt; &#123; console.log(sum); &#125;</code></td><td>🈚️</td><td>sum</td></tr></tbody></table><p>🔴 依次用不同“参数”执行三个<code>() =&gt; &#123; add(i, j); &#125;</code></p><p>观察<code>add()</code>函数代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">i, j</span>) &#123;</span><br><span class="line">  sum += <span class="keyword">await</span> (i + j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错这又是一个异步的代码！</p><p>由于<code>await</code>的特性，当执行到<code>await</code>时，此段任务的剩余代码 包括<code>await</code>所在语句会被一个<code>Promise</code>包起来。由于这里<code>await</code>后面表达式返回值不是一个 Promise，所以这里的意思是：</p><blockquote><p>此段任务的剩余代码 包括<code>await</code>所在语句会被<code>Promise</code>包起来并且挂起，等待其他优先级更高的任务执行完再执行</p></blockquote><p>另外这里新建的任务优先级是和之前<code>Promise</code>挂起的任务相同的，所以比<code>setTimeout</code>更先执行，并且与之前的<code>Promise</code>挂起的任务队列一起依次执行</p><p>同时这里还有一个考点 ⚠️：</p><blockquote><p><code>await</code>语句及其后面代码被包进<code>Promise</code>时，会为这些代码用到的外部变量产生一个闭包</p></blockquote><p>🔴 我们来重新梳理一下任务列表：</p><p>当第一个<code>() =&gt; &#123; add(i, j); &#125;</code>执行后：</p><table><thead><tr><th>是否完成</th><th>顺序</th><th>任务</th><th>闭包变量</th><th>全局变量</th></tr></thead><tbody><tr><td>True</td><td>1</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 0;</td><td>j</td></tr><tr><td>False</td><td>2</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 1;</td><td>j</td></tr><tr><td>False</td><td>3</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 2;</td><td>j</td></tr><tr><td>False</td><td>4</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 0; sum = 0;</td><td>j</td></tr><tr><td>False</td><td>5</td><td><code>() =&gt; &#123; console.log(sum); &#125;</code></td><td>🈚️</td><td>sum</td></tr></tbody></table><p>那么以此类推，当我们的<code>() =&gt; &#123; add(i, j); &#125;</code>任务全部执行完毕后</p><table><thead><tr><th>是否完成</th><th>顺序</th><th>任务</th><th>闭包变量</th><th>全局变量</th></tr></thead><tbody><tr><td>True</td><td>1</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 0;</td><td>j</td></tr><tr><td>True</td><td>2</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 1;</td><td>j</td></tr><tr><td>True</td><td>3</td><td><code>() =&gt; &#123; add(i, j); &#125;</code></td><td>i = 2;</td><td>j</td></tr><tr><td>False</td><td>4</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 0; sum = 0;</td><td>j</td></tr><tr><td>False</td><td>5</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 1; sum = 0;</td><td>j</td></tr><tr><td>False</td><td>6</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 2; sum = 0;</td><td>j</td></tr><tr><td>False</td><td>7</td><td><code>() =&gt; &#123; console.log(sum); &#125;</code></td><td>🈚️</td><td>sum</td></tr></tbody></table><p>🔴 接下来依次执行<code>() =&gt; &#123; sum += await (i + j); &#125;</code>任务</p><table><thead><tr><th>顺序</th><th>任务</th><th>闭包变量</th><th>全局变量</th><th>执行后 sum 的值</th></tr></thead><tbody><tr><td>4</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 0; sum = 0;</td><td>j</td><td>3</td></tr><tr><td>5</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 1; sum = 0;</td><td>j</td><td>4</td></tr><tr><td>6</td><td><code>() =&gt; &#123; sum += await (i + j); &#125;</code></td><td>i = 2; sum = 0;</td><td>j</td><td>5</td></tr></tbody></table><p>这里终于不用考虑异步了，依次执行就行</p><p>🔴 最后一个终于轮到<code>() =&gt; &#123; console.log(sum); &#125;</code>了，直接输出全局的<code>sum = 5</code></p><h2 id="坑点梳理"><a href="#坑点梳理" class="headerlink" title="坑点梳理"></a>坑点梳理</h2><p>最后让我们梳理一下坑点</p><ul><li><strong>执行时机</strong>：<code>Promise.resolve().then()</code>和<code>setTimeout(fn,0)</code>都是立即执行，且都需要等待当前任务执行完后再执行，但是<code>Promise</code>的优先级更高，更先执行。另外<code>await/async</code>语句执行优先级和<code>Promise</code>相同。在任务执行时，同类型任务，也是按先创建先执行顺序执行。</li><li><strong>语句理解</strong>：<code>let i = j = 0</code>语句在解释时，<code>let</code>应从左往右解释，<code>=</code>应从右往左解释（《You Don’t Know JavaScript》第一章便有讲解），也就是说只声明了局部的<code>i</code>而未声明<code>j</code>，所以<code>j</code>被默认安排在了全局。</li><li><strong>闭包问题</strong>：闭包这个问题算是老生常谈了，不做解释，多练练就会了。但是<code>await</code>这里会有隐藏的闭包要注意，<code>await</code>语句及其后面代码被包进<code>Promise</code>时，会为这些代码用到的外部变量产生一个闭包</li></ul>]]></content>
    
    
    <summary type="html">一段逆天的js代码</summary>
    
    
    
    
    <category term="js" scheme="https://lakphy.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Redux Essentials 学习笔记</title>
    <link href="https://lakphy.github.io/blog/2022/07/22/Redux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lakphy.github.io/blog/2022/07/22/Redux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-22T13:23:36.000Z</published>
    <updated>2022-08-19T14:33:01.742Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究 Redux。看了中文文档感觉翻不太行，所以我在读英文文档，但由于我英文水平不太行，本文将会以中文为主展现，主要作为个人记忆用。</p><p>感觉 Redux 这个入门文档有点杂，掺入了官方推荐工具<code>Redux-Toolkit</code>和<code>Redux-React</code>的内容。本篇介绍的 Redux 是借用这些工具使用的。</p><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建<code>store</code></h2><p>Redux 的 store 由 RTK（Redux Toolkit）的 <code>configureStore</code> api 创建。</p><p>文档建议此段代码位置在 <code>/src/app/store.js</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&quot;../features/counter/counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从文档中的代码可以看出<code>configureStore</code>用法：</p><ul><li>输入 一个对象<ul><li>reducer(object)<ul><li>切片名:(createSlice()创建的切片.reducer)</li></ul></li></ul></li><li>输出 一个 store 对象</li></ul><p>其中 store 对象会被<code>export default</code>，并且 store 对象<strong>只能用于</strong><code>Provider</code>中，即<code>index.js</code>中的<code>&lt;Provider store=&#123;store&#125;&gt;</code></p><p>一个 React App 建议（或者说 应当）只有一个 store</p><h2 id="用Provider覆盖-React-根结点"><a href="#用Provider覆盖-React-根结点" class="headerlink" title="用Provider覆盖 React 根结点"></a>用<code>Provider</code>覆盖 React 根结点</h2><p>将 React 原本的<code>&lt;App /&gt;</code>修改为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Provider</span> store=&#123;store&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Provider</span>&gt;</span><br></pre></td></tr></table></figure><p>在 React App 的入口文件<code>index.js</code>中使用由<code>Redux-React</code>提供的<code>Provider</code>将根节点覆盖住，并传入 store</p><h2 id="创建-Redux-切片"><a href="#创建-Redux-切片" class="headerlink" title="创建 Redux 切片"></a>创建 Redux 切片</h2><p>创建一个 Redux 切片即为在 Redux store 树 🌲 创建一个分支</p><p>文档将其写在<code>/src/feature/counter/counterSlice.js</code>中</p><h3 id="createSlice"><a href="#createSlice" class="headerlink" title="createSlice()"></a>createSlice()</h3><p>首先使用 React Toolkit 提供的<code>createSlice()</code>创建一个 Redux 切片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Redux Toolkit allows us to write &quot;mutating&quot; logic in reducers. It</span></span><br><span class="line">      <span class="comment">// doesn&#x27;t actually mutate the state because it uses the immer library,</span></span><br><span class="line">      <span class="comment">// which detects changes to a &quot;draft state&quot; and produces a brand new</span></span><br><span class="line">      <span class="comment">// immutable state based off those changes</span></span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">postAdded</span>: &#123;</span><br><span class="line">      <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">        state.<span class="title function_">push</span>(action.<span class="property">payload</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">prepare</span>(<span class="params">title, content</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">payload</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="title function_">nanoid</span>(),</span><br><span class="line">            title,</span><br><span class="line">            content,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由这段代码可以看出<code>createSlice</code>用法：</p><ul><li>输入 一个对象<ul><li>name:切片名称</li><li>initialState 初始值，文档建议为对象形式</li><li>reducers 一个对象，包含处理更改的 reducer<ul><li>reducer 名称:reducer 函数<ul><li>函数输入<ul><li>state：当前切片值</li><li>action：包含 Redux dispatch 传入的原始 <a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#actions">Action 对象</a>，当使用 RTK 自动生成的<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#action-creators">Action Creator</a>进行 dispatch 时，<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#action-creators">Action Creator</a>函数的参数位于<code>action.payload</code>位置（同时这也是官方推荐的<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#actions">Action 对象</a>的标准写法）</li></ul></li><li>函数特性<ul><li>在 Redux 中，reducer 函数应当为<strong>纯函数</strong>，因为我注意到英文文档中并没有说过他是纯函数，只是在每次提到这个问题是列举一遍其特点，这里做一下摘抄<blockquote><p>reducers <strong>must</strong> always follow some special rules:</p><ul><li>They should only calculate the new state value based on the state and action arguments</li><li>They are not allowed to modify the existing state. Instead, they must make immutable updates, by copying the existing state and making changes to the copied values.</li><li>They must not do any asynchronous logic or other “side effects”</li></ul><p>why are these rules important?</p><ul><li>One of the goals of Redux is to make your code predictable. When a function’s output is only calculated from the input arguments, it’s easier to understand how that code works, and to test it.</li><li>On the other hand, if a function depends on variables outside itself, or behaves randomly, you never know what will happen when you run it.</li><li>If a function modifies other values, including its arguments, that can change the way the application works unexpectedly. This can be a common source of bugs, such as “I updated my state, but now my UI isn’t updating when it should!”</li><li>Some of the Redux DevTools capabilities depend on having your reducers follow these rules correctly.</li></ul></blockquote></li><li>尽管文档反复强调<strong>immutable</strong>，即不更改行参，但是由于 RTK 使用了<a href="https://github.com/immerjs/immer">immerjs</a>辅助，你也可以在 RTK 的 reducer 中使用 mutating 的代码，但是请注意<strong>只能在 RTK 的 reducer 中这么写！！！</strong><blockquote><p>引用原文<br>🔥WARNING<br>Remember: <strong>reducer functions must always create new state values immutably, by making copies!</strong> It’s safe to call mutating functions like <code>Array.push()</code> or modify object fields like <code>state.someField = someValue</code> inside of <code>createSlice()</code>, because it converts those mutations into safe immutable updates internally using the Immer library, but <strong>don’t try to mutate any data outside of <code>createSlice</code>!</strong></p></blockquote></li></ul></li></ul></li><li>也可以在 reducer 名后传入一个对象<code>&#123;reducer, prepare&#125;</code><ul><li><code>prepare</code>函数，参数可以自定义，但与 reducer 不同的是我们可以将 reducer 禁止的代码（异步、随机、副作用等）写在<code>prepare</code>函数里。使用了<code>prepare</code>函数后，在其生成的<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#action-creators">Action Creator</a>中可以直接使用我们自定义的<code>prepare</code>函数的参数调用。<ul><li>参数：自定义</li><li>返回值：一个无需<code>type</code>字段的 Action 对象，即<code>&#123;payload:&#123;&#125;&#125;</code>，也允许添加<code>meta</code>、<code>error</code>字段<ul><li><code>payload</code>：Action 对象的<code>payload</code></li><li><code>meta</code>：可用于向 action 添加额外的描述性值</li><li><code>error</code>：该字段应该是一个布尔值，指示此 action 是否表示某种错误</li></ul></li></ul></li><li><code>reducer</code>函数本身，与之前说的要求一样</li></ul></li></ul></li><li><code>extraReducers</code>：一个函数，参数为一个<code>builder</code>对象，用于为外部定义的 actions 定义 reducers，build 对象的操作可以链式调用，下面是一些用法介绍：（其中 reducer 函数与之前定义相同<code>(state, action) =&gt; &#123;&#125;</code>）<ul><li><code>builder.addCase(actionCreator, reducer)</code>：为一个 Action Creator 或者一个 Action 字符串添加 reducer</li><li><code>builder.addMatcher(matcher, reducer)</code>：为 matter function 返回为 true 的所有 action 添加 reducer</li><li><code>builder.addDefaultCase(reducer)</code>：当没有其他项匹配时的默认 reducer<blockquote><p>样例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extraReducers</span>: <span class="function">(<span class="params">builder</span>) =&gt;</span> &#123;</span><br><span class="line">  builder</span><br><span class="line">    .<span class="title function_">addCase</span>(<span class="string">&quot;counter/decrement&quot;</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">addCase</span>(increment, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ul></li><li>返回值 返回一个初始化好的 Redux 切片对象，我们可以从这个对象中获得我们有用的东西（见下文）</li></ul><h3 id="获取Action-Creator"><a href="#获取Action-Creator" class="headerlink" title="获取Action Creator"></a>获取<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#action-creators">Action Creator</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br></pre></td></tr></table></figure><p>此段代码用于从 Redux 切片中获取<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#action-creators">Action Creator</a>函数</p><h3 id="导出切片的Selectors"><a href="#导出切片的Selectors" class="headerlink" title="导出切片的Selectors"></a>导出切片的<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts#selectors">Selectors</a></h3><p>如果我们可以直接获取到 Redux store 对象，可以直接使用<code>store.getState()</code>获取整个 store 树的存储，<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts#selectors">Selectors</a>就是负责从整个 store 数中拿到我们切片数据的</p><p>或许我们可以直接把它（Selector）写成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">selectCounterValue</span> = (<span class="params">state</span>) =&gt; state.<span class="property">counter</span>;</span><br></pre></td></tr></table></figure><p>就是一个非常简单的把 store 树上一部分取出来的工具，可以在这里写好然后导出，也可以用的时候现写。</p><blockquote><p>刚说到“如果我们可以直接获取到 Redux store 对象”，这是一种理想情况，而 RTK 不允许我们随意引用和使用 store 对象，<del>而且这么做也不优雅</del>，这时候会需要用到 Redux-React 提供的<code>useSelector</code>工具，将会在后文解释</p></blockquote><h3 id="导出-reducer"><a href="#导出-reducer" class="headerlink" title="导出 reducer"></a>导出 reducer</h3><p>我们之前初始化 Redux 切片时传入的 Reducer 是一个一个独立的，还要经过 RTK 的合并和处理（其中有一项可能和之前说的 immerjs 有关），才能用于 Redux store，可以通过以下代码将 RTK 处理过的 reducer 导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><h2 id="在-React-Component-中应用-Redux"><a href="#在-React-Component-中应用-Redux" class="headerlink" title="在 React Component 中应用 Redux"></a>在 React Component 中应用 Redux</h2><p>这部分内容主要由<code>Redux-React</code>提供，毕竟 Redux 并不是局限于某个 js 框架的状态管理工具，他是一个非常开放的工具。</p><h3 id="获取-Redux-store-数据"><a href="#获取-Redux-store-数据" class="headerlink" title="获取 Redux store 数据"></a>获取 Redux store 数据</h3><p><code>Redux-React</code>提供了<code>useSelector</code>钩子用来获取 Redux store 中的数据，使用方法如下</p><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 React Component 中调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">useSelector</span>(selectCount);</span><br></pre></td></tr></table></figure><p>其中<code>selectCount</code>即为<a href="#%E5%AF%BC%E5%87%BA%E5%88%87%E7%89%87%E7%9A%84Selectors">上文中导出的 Selector</a>。</p><p>当然也可以写为行内的 Selector：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span>);</span><br></pre></td></tr></table></figure><p>这样可以得到 Selector 筛选后的 store 数据，并且得益于<code>Redux-React</code>对 React 的单独适配，当筛选后的 store 数据变化时，对应组件也会进行重新渲染。</p><p>但是需要注意的一点是，每次调用 dispatch 时，不管在哪里调用 dispatch，都会重新计算一遍<code>Selector</code>函数，如果计算结果发生变化，则会使对应组件重新渲染。这里发生的变化如果是对象，则比较的对象的<strong>引用</strong>是否发生变化，即<code>&#123;&#125;!==&#123;&#125;</code></p><h3 id="dispatch-更改"><a href="#dispatch-更改" class="headerlink" title="dispatch 更改"></a>dispatch 更改</h3><p>由于 Redux 禁止直接获取 store，<code>Redux-React</code>提供了<code>useDispatch</code>钩子用来获取 <code>dispatch</code> 函数</p><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 React Component 中调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br></pre></td></tr></table></figure><p>然后便可以直接使用<code>dispatch</code>函数去触发更改了，与<code>store.dispatch</code>用法相同，可以传入<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts/#action-creators">Action Creator</a>（包括 RTK 生成的 Action Creator），也可以传入一个简单的 action 对象，下面这两种方法都是可以的，传入 payload 的类型也没有限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;counter/incrementByAmount&quot;</span>, <span class="attr">payload</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 警告<br>Redux actions and state should only contain plain JS values like objects, arrays, and primitives. Don’t put class instances, functions, or other non-serializable <em>(不可序列化)</em> values into Redux!.</p></blockquote><h1 id="使用-Thunk-函数"><a href="#使用-Thunk-函数" class="headerlink" title="使用 Thunk 函数"></a>使用 Thunk 函数</h1><p>thunk 函数通常写在 slice 文件内，（与<code>createSlice</code>同文件），这样可以便于寻找代码。</p><h2 id="使用简单的-Thunk"><a href="#使用简单的-Thunk" class="headerlink" title="使用简单的 Thunk"></a>使用简单的 Thunk</h2><p>thunk 是一种特定类型的 Redux 函数，可以包含异步逻辑。Thunk 是使用两个函数编写的：</p><ul><li>内部 thunk 函数，它以 <code>dispatch</code> 和 <code>getState</code> 作为参数</li><li>外部 thunk creator 函数，它创建并返回 thunk 函数</li></ul><p>例如在<a href="https://codesandbox.io/embed/github/reduxjs/redux-essentials-example-app/tree/master/">Redux Demo</a>中有一段异步 dispatch 的例子，这个例子写在<code>/src/feature/counter/counterSlice.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">incrementAsync</span> = (<span class="params">amount</span>) =&gt; <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(amount));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>thunk 函数可以这样 <code>dispatch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">incrementAsync</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>我们可以将这个函数提高一下代码可读性来看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">incrementAsync</span> = (<span class="params">amount</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(amount));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代入至 <code>dispatch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(<span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(<span class="number">5</span>));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也就是相当于向<code>dispatch</code>传入一个函数 A，参数为<code>dispatch</code>和<code>getState</code>函数，在函数 A 内实现异步逻辑之后再去<code>dispatch</code>。</p><blockquote><p>使用 thunk 需要在创建时将 <code>redux-thunk</code> middleware（一种 Redux 插件）添加到 Redux store 中。幸运的是，RTK 的 configureStore 函数已经自动为我们配置好了，所以我们可以继续在这里使用 thunk。</p></blockquote><p>另外再提供一个改自文档的网络请求的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchUserById</span> = (<span class="params">userId</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(userId);</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">userLoaded</span>(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// do sth</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到外部 thunk creator 函数的作用是为了将我们的参数传入 thunk 内部函数，并且还能与 Action Creator 形式保持一致</p><h2 id="使用createAsyncThunk创建异步-Thunk"><a href="#使用createAsyncThunk创建异步-Thunk" class="headerlink" title="使用createAsyncThunk创建异步 Thunk"></a>使用<code>createAsyncThunk</code>创建异步 Thunk</h2><p>RTK 提供了一个<code>createAsyncThunk</code>方法来创建异步的 Thunk，方便我们进行网络请求等操作</p><p>直接看一个文档样例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPosts = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;posts/fetchPosts&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> client.<span class="title function_">get</span>(<span class="string">&quot;/fakeApi/posts&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在此例中，刚开始 fetch 数据时会 dispatch <code>posts/fetchPosts/pending</code> Action，fetch 完成后会 dispatch <code>posts/fetchPosts/fulfilled</code> Action，出现问题时则会 dispatch <code>posts/fetchPosts/rejected</code> Action</p><p><strong>参数</strong></p><ul><li>Action 字符串</li><li><code>payloadCreator</code>函数，其中包含我们的异步代码，参数如下：<ul><li><code>arg</code>：dispatch 这个 Action Creator 时候传入的第一个参数，如果有多个参数，则应放在一个对象中传入</li><li><code>thunkAPI</code>：一个对象<ul><li><code>dispatch</code>：the Redux store dispatch method</li><li><code>getState</code>：the Redux store getState method</li><li><code>extra</code>：the “extra argument” that can be passed into the thunk middleware when creating the store. This is typically some kind of API wrapper, such as a set of functions that know how to make API calls to your application’s server and return data, so that your thunks don’t have to have all the URLs and query logic directly inside.</li><li><code>requestId</code>：a unique string ID value that was automatically generated to identify this request sequence</li><li><code>signal</code>：一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal"><code>AbortController.signal</code>对象</a>，可用于查看执行时是否已将此请求取消</li><li><code>rejectWithValue(value, [meta])</code>：rejectWithValue is a utility function that you can <code>return</code> (or <code>throw</code>) in your action creator to return a rejected response with a defined payload and meta. It will pass whatever value you give it and return it in the payload of the rejected action. If you also pass in a <code>meta</code>, it will be merged with the existing <code>rejectedAction.meta</code>.</li><li><code>fulfillWithValue(value, meta)</code>：fulfillWithValue is a utility function that you can <code>return</code> in your action creator to fulfill with a value while having the ability of adding to <code>fulfilledAction.meta</code>.</li></ul></li></ul></li><li><code>options</code>对象<ul><li><code>condition(arg, &#123; getState, extra &#125; ): boolean | Promise&lt;boolean&gt;</code>：用于跳过执行<code>payloadCreator</code>，详细信息<a href="https://redux-toolkit.js.org/api/createAsyncThunk#canceling-before-execution">Canceling Before Execution</a></li><li><code>dispatchConditionRejection</code>：当上一个<code>condition</code>参数返回值为<code>false</code>时，不会 dispatch 任何 Action，如果想要 dispatch 一个 rejection 可以将这个参数置为<code>true</code>。</li><li><code>idGenerator(arg): string</code>：用于生成随机<code>requestId</code>的函数。默认使用<a href="https://redux-toolkit.js.org/api/other-exports/#nanoid">nanoid</a></li><li><code>serializeError(error: unknown) =&gt; any</code>：to replace the internal miniSerializeError method with your own serialization logic.</li><li><code>getPendingMeta(&#123; arg, requestId &#125;, &#123; getState, extra &#125;): any</code>：一个函数，用于创建一个对象最终会合入<code>pendingAction.meta</code></li></ul></li></ul><p><strong>返回值</strong></p><ul><li>一个 thunk action creator，用于 dispatch 这个异步 thunk action，eg：<code>&#39;users/fetchByIdStatus&#39;</code></li><li>还可以调用它其中包含的 action creator<ul><li><code>pending</code>：待完成，eg：<code>&#39;users/fetchByIdStatus/pending&#39;</code></li><li><code>fulfilled</code>：已完成，eg：<code>&#39;users/fetchByIdStatus/fulfilled&#39;</code></li><li><code>rejected</code>：被拒绝，eg：<code>&#39;users/fetchByIdStatus/rejected&#39;</code></li></ul></li></ul><p><strong>thunk action creator 的 dispatch 过程</strong></p><ul><li>dispatch the pending action</li><li>call the payloadCreator callback and wait for the returned promise to settle</li><li>when the promise settles:<ul><li>if the promise resolved successfully, dispatch the fulfilled action with the promise value as action.payload</li><li>if the promise resolved with a rejectWithValue(value) return value, dispatch the rejected action with the value passed into action.payload and ‘Rejected’ as action.error.message</li><li>if the promise failed and was not handled with rejectWithValue, dispatch the rejected action with a serialized version of the error value as action.error</li></ul></li><li>Return a fulfilled promise containing the final dispatched action (either the fulfilled or rejected action object)</li></ul><p>关于这个<code>createAsyncThunk</code>方法的具体细节可以查看<a href="https://redux-toolkit.js.org/api/createAsyncThunk">https://redux-toolkit.js.org/api/createAsyncThunk</a></p><h1 id="性能优化注意点"><a href="#性能优化注意点" class="headerlink" title="性能优化注意点"></a>性能优化注意点</h1><h2 id="useSelector重复渲染"><a href="#useSelector重复渲染" class="headerlink" title="useSelector重复渲染"></a><code>useSelector</code>重复渲染</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>每次调用 dispatch 时，不管在哪里调用 dispatch，都会重新计算一遍<code>Selector</code>函数，如果计算结果发生变化，则会使<code>useSelector</code>对应组件重新渲染。这里发生的变化如果是对象，则比较的对象的<strong>引用</strong>是否发生变化，即<code>&#123;&#125;!==&#123;&#125;</code>。</p><p>观察下列代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postsForUser = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allPosts = <span class="title function_">selectAllPosts</span>(state);</span><br><span class="line">  <span class="keyword">return</span> allPosts.<span class="title function_">filter</span>(<span class="function">(<span class="params">post</span>) =&gt;</span> post.<span class="property">user</span> === userId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每次 dispatch 时计算得出的数组对象的引用是不相同的，所以会导致不管在哪里 dispatch，都会使这个组件重新渲染</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>可以使用<a href="https://github.com/reduxjs/reselect">Redux Reselect</a>创建 memoized Selector 函数。</p><p>RTK 已经帮我们加好了这个库，所以只需要在 RTK 中引出<a href="https://redux-toolkit.js.org/api/createSelector"><code>createSelector</code>函数</a>即可使用它创建 Selector 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectPostsByUser = <span class="title function_">createSelector</span>(</span><br><span class="line">  [selectAllPosts, <span class="function">(<span class="params">state, userId</span>) =&gt;</span> userId],</span><br><span class="line">  <span class="function">(<span class="params">posts, userId</span>) =&gt;</span> posts.<span class="title function_">filter</span>(<span class="function">(<span class="params">post</span>) =&gt;</span> post.<span class="property">user</span> === userId)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">const</span> postsForUser = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> <span class="title function_">selectPostsByUser</span>(state, userId));</span><br></pre></td></tr></table></figure><p>这里<code>createSelector</code>第二个参数函数仅在第一个列表中 Selector 返回值发生变化时执行并返回新值</p><h2 id="数据范式化"><a href="#数据范式化" class="headerlink" title="数据范式化"></a>数据范式化</h2><p>为了便于查找数据，我们可以将数据范式化（Normalized），即：</p><ul><li>我们 state 中的每个特定数据只有一个副本，不存在重复。</li><li>已范式化的数据保存在查找表中，其中项目 ID 是键，项本身是值。</li><li>也可能有一个特定项用于保存所有 ID 的数组。</li></ul><p>JavaScript 对象可以用作查找表，类似于其他语言中的 “maps” 或 “dictionaries”。 以下是一组“用户”对象的范式化 state 可能如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">users</span>: &#123;</span><br><span class="line">    <span class="attr">ids</span>: [<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;user2&quot;</span>, <span class="string">&quot;user3&quot;</span>],</span><br><span class="line">    <span class="attr">entities</span>: &#123;</span><br><span class="line">      <span class="string">&quot;user1&quot;</span>: &#123;<span class="attr">id</span>: <span class="string">&quot;user1&quot;</span>, firstName, lastName&#125;,</span><br><span class="line">      <span class="string">&quot;user2&quot;</span>: &#123;<span class="attr">id</span>: <span class="string">&quot;user2&quot;</span>, firstName, lastName&#125;,</span><br><span class="line">      <span class="string">&quot;user3&quot;</span>: &#123;<span class="attr">id</span>: <span class="string">&quot;user3&quot;</span>, firstName, lastName&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>For more details on why normalizing state is useful, see <a href="https://redux.js.org/usage/structuring-reducers/normalizing-state-shape">Normalizing State Shape</a> and the Redux Toolkit Usage Guide section on <a href="https://redux-toolkit.js.org/usage/usage-guide#managing-normalized-data">Managing Normalized Data</a>.</p></blockquote><h3 id="使用createEntityAdapter管理范式化数据"><a href="#使用createEntityAdapter管理范式化数据" class="headerlink" title="使用createEntityAdapter管理范式化数据"></a>使用<code>createEntityAdapter</code>管理范式化数据</h3><p>RTK 提供了<code>createEntityAdapter</code>API 来管理范式化数据，可以将数据以<code>&#123; ids: [], entities: &#123;&#125; &#125;</code>形式存储，并且生成一系列 reducer 和 selector ，它有以下优点：</p><ul><li>不用自己手动维护序列化数据</li><li>预先生成一系列 reducer：添加所有项、更新一个项、删除多项 等</li><li>可以将项 ID 按一定顺序排列，并且仅当项增删改或者排序规则改变时会重新排列</li></ul><p><code>createEntityAdapter</code>：<br>接收参数（一个配置对象）：</p><ul><li><code>sortComparer</code>函数：ID 排序函数（排序函数写法类似<code>Array.sort()</code>）</li></ul><p>返回值（一个<code>adapter</code>对象）：</p><ul><li>包含一系列用于增删改的 reducer，具体 reducer 参见<a href="https://redux-toolkit.js.org/api/createEntityAdapter#crud-functions">createEntityAdapter#crud-functions</a></li><li><code>getSelectors</code>函数<ul><li>接收一个 Selector 函数，用于从 store 中筛选出序列化数据所在位置<br>eg：<code>state =&gt; state.posts</code></li><li>返回一个对象，包含一系列序列化数据选择器：<ul><li><code>selectAll</code></li><li><code>selectById</code></li><li><code>selectIds</code></li></ul></li></ul></li><li><code>getInitialState</code>函数：将会返回这组序列化数据的 InitialState，用于填入 RTK<code>createSlice</code>中的<code>initialState</code>，除了序列化数据原有的值<code>&#123; ids: [], entities: &#123;&#125; &#125;</code>外，如果想向里面加入其他键值，可以以对象形式传入这个函数：<code>const initialState = postsAdapter.getInitialState(&#123; status: &#39;idle&#39;, error: null &#125;)</code></li></ul><p>经过<code>createEntityAdapter</code>生成的对应 state 形式为<code>&#123; ids: [], entities: &#123;&#125; &#125;</code>，<code>ids</code>用于存键名列表，<code>entities</code>对象用于键值对应数据</p><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h2 id="reduxjs-toolkit"><a href="#reduxjs-toolkit" class="headerlink" title="@reduxjs/toolkit"></a>@reduxjs/toolkit</h2><h3 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a><code>nanoid</code></h3><p>基于<a href="https://github.com/ai/nanoid">nanoid/nonsecure</a>，用于生成一个随机 id 字符串，在 Redux 内部主要用于管理<code>createAsyncThunk</code>的异步请求 id，也可以用于其他用途。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nanoid</span>());</span><br><span class="line"><span class="comment">// &#x27;dgPXxUz_6fWIQBD8XmiSy&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    
    <summary type="html">Redux Essentials 学习笔记</summary>
    
    
    
    
    <category term="Redux" scheme="https://lakphy.github.io/blog/tags/Redux/"/>
    
    <category term="React" scheme="https://lakphy.github.io/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>《编程之美》读书记录（一）</title>
    <link href="https://lakphy.github.io/blog/2022/07/20/%E3%80%8A%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E3%80%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://lakphy.github.io/blog/2022/07/20/%E3%80%8A%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E3%80%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-07-20T15:43:08.000Z</published>
    <updated>2022-07-21T14:40:09.866Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个程序员，我个人对微软非常向往的，不论是技术环境、工作待遇等等方面看，而且看到一个又一个学长去微软实习，心里很是羡慕。</p><p>记得去年年底微软招聘微信公众号发布了“<a href="https://mp.weixin.qq.com/s/nAibjhSMvA6zfxcG32Sx6w">微软 2022 暑期实习研发提前批正式启动</a>”的文章，实在是让我感到很震撼，太卷了吧，暑期实习要提前半年开始面试，那我岂不是提前一年就要开始准备啊，一想到这里就感觉到强烈的紧迫感。</p><p>前几天接触到了一个刚从 MS 北京毕业的高中校友，我顺便就问了一些关于去 MS 需要注意的事情，他就给我推荐了《编程之美》这本书。</p><p>为了督促学习，尽管找到了 pdf 资源，我还是买了纸质版本，并且希望把今后在博客上记录一些读书时遇到的值得记忆的问题和知识点。</p><p><img src="s34075059.jpeg" alt="book"></p><hr><p>很明显这本书应该多数是算法题，看了一眼应该是 C 语言。作者也有写到 MS 很重视 C 语言基础，看来我要重新拾起将近四年没有碰的 C 语言和算法了（自 18 年 Noip 落榜后，我更专注于一些脚本语言了，可能因为他们可以更快速地给我带来快乐）</p><p>我其实是本来就有重拾算法的计划的，只是不知道怎么重拾，买了一本紫皮书《算法竞赛入门经典》，但又感觉可能不太适合，毕竟我重拾算法也不大可能去打 ACM，看紫皮书完全是大材小用。</p><p>我会在阅读过程中看到什么想记的，就记下来了，可能我的记录毫无规律，敬请谅解。</p><p>希望这本书能够帮助我我重拾算法，带我走进 MS 🙏</p><p>下面就是正文了，您有时候看到文章可能是没写完的，毕竟我目前除了学业外还需要承担很多前端项目开发工作和社团管理工作，另一边我还在读纯英文的 Redux 文档，我会尽可能高频率地去更新，更新进度即代表我的阅读进度</p><hr><h1 id="面试杂谈的一些记录"><a href="#面试杂谈的一些记录" class="headerlink" title="面试杂谈的一些记录"></a>面试杂谈的一些记录</h1><h2 id="随便记点"><a href="#随便记点" class="headerlink" title="随便记点"></a>随便记点</h2><ul><li>面试前去多多了解对方企业的产品和业务，尤其是对自己要去的组要尽可能多地了解</li><li><blockquote><p>对于微软的工程师来说，C 语言是基本功。</p></blockquote></li><li><a href="https://www.msra.cn/">微软亚洲研究院官网</a></li></ul><h2 id="下水道的井盖为什么是圆的？"><a href="#下水道的井盖为什么是圆的？" class="headerlink" title="下水道的井盖为什么是圆的？"></a>下水道的井盖为什么是圆的？</h2><p>（这是一个 PM 问题）</p><p>emmmm 这题就是考察思维能力，没有正确答案，主要是看你思考的过程，可以看看知乎上的各种答案：<a href="https://www.zhihu.com/question/19678960">井盖为什么是圆的 - 知乎</a></p><h2 id="三盏灯问题"><a href="#三盏灯问题" class="headerlink" title="三盏灯问题"></a>三盏灯问题</h2><p>（这是一个 PM 问题）</p><blockquote><p>房间里有三盏灯，屋外有三个开关，分别控制这三盏灯，只有进入房间，才能看到哪一个电灯是亮的。请问如何只进入房间一次，就能指明哪一个开关控制哪一个灯？</p></blockquote><h3 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h3><p>开 A 开关 10 分钟，关掉，再开 B 开关，进屋，两者的是 B，热的是 A，剩下一个是 C</p><h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3><h1 id="第一章-游戏之乐"><a href="#第一章-游戏之乐" class="headerlink" title="第一章-游戏之乐"></a>第一章-游戏之乐</h1><h2 id="1-1-让-CPU-占用率听你指挥"><a href="#1-1-让-CPU-占用率听你指挥" class="headerlink" title="1.1-让 CPU 占用率听你指挥"></a>1.1-让 CPU 占用率听你指挥</h2>]]></content>
    
    
    <summary type="html">《编程之美》读书记录（一）</summary>
    
    
    
    
    <category term="《编程之美》" scheme="https://lakphy.github.io/blog/tags/%E3%80%8A%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>打印了一个2021 Github Contributions</title>
    <link href="https://lakphy.github.io/blog/2022/07/20/%E6%89%93%E5%8D%B0%E4%BA%86%E4%B8%80%E4%B8%AA2021-Github-Contributions/"/>
    <id>https://lakphy.github.io/blog/2022/07/20/%E6%89%93%E5%8D%B0%E4%BA%86%E4%B8%80%E4%B8%AA2021-Github-Contributions/</id>
    <published>2022-07-20T04:59:28.000Z</published>
    <updated>2022-07-20T05:44:26.239Z</updated>
    
    <content type="html"><![CDATA[<p>先看实物图：<br><img src="/blog/imgs/670ADD2B56444B2FDB90C54283180CF4.jpg" alt="Github Contributions"></p><p>这是一个 Github2021 年的年度 Contributions 小绿格的 3D 打印版本</p><p><img src="1.png" alt="screenshot"></p><p>如图是我 2021 年的“2D”版本 Github Contributions，点击右下角文字即可展示酷炫的 3D 效果图</p><p><img src="2.png" alt="screenshot"></p><p>还可以点击下载<code>stl</code>文件，然后 3D 打印出来</p><p>这个产品的名字叫<strong>Skyline</strong></p><p>太酷炫了，应该没有一个程序员能抗拒这么酷的东西</p><p>对于我来说，他不仅记录了我一年来的开发贡献，</p><p>2021 年是我开始深入进行前端开发的第一年，</p><p>我承认我之前没有深入前端开发是存在某些偏见，我片面以为前端开发就是三大件，没有什么东西</p><blockquote><p>（当然这个理解也让我在之前就积累了充足的切图经验）</p></blockquote><p>后来我才逐渐发现，在某种意义上讲，三大件可能只是运营同学的工具，而深入前端开发大有乾坤。</p><p>对着这个这个立体图，我仿佛看着我做的每一个项目，仿佛看到了每一个开发调试熬夜上线的夜晚，甚至指着每一个小山峰我都可以说出那是哪个项目（当然因为保密原因我这里就不细嗦了）</p><p>就像我在 2021 年度总结上面写的一样，一个一个项目，也是象征着我水平逐渐上涨，前端学习的逐渐深入。</p><p>其实 Github 的这个小玩意很早就上线了，但我一直忍住没打，主要是想 22 年努力做一个更好看的图再去打印。</p><p>最近实在忍不住了，毕竟是第一年深入前端，还是很有纪念意义的，虽然 22 年已经过半了，但还是有必要去打印一下的</p><p>我的这些 Contributions 质量倒是可以保证，而且都是实际上线的项目开发的成果，并且都有上万的用户量，对我个人来讲，项目经历是够用了，</p><p>但反思一下，</p><p>这一年我除了做项目，似乎什么都没做…</p><p>21 年开始，我的博客逐渐不更新了，我的 Contributions 里几乎没有更新博客相关的</p><p>也就是相当于除了项目必须技术，我几乎没学什么技术，我觉得对我来说影响是非常大的，</p><p>所以这次重新拾起博客也是想在未来多学习一些技术，提升自己，并通过博客督促自己</p><p>另外我也建立了前端开发相关 <del>但不限于前端开发</del> 的 Telegram 频道，欢迎订阅：<br><a href="https://t.me/lakphyFE">https://t.me/lakphyFE</a></p><blockquote><p>另外<code>Skyline</code>的 url 似乎有某种规律，应该可以用来看任意时间任意人的 3D 图，用心了</p></blockquote><p>End…<br><img src="SKY_20220522_012554_.jpg" alt="End"></p>]]></content>
    
    
    <summary type="html">打印了一个3D的2021 Github Contributions</summary>
    
    
    
    
    <category term="Github" scheme="https://lakphy.github.io/blog/tags/Github/"/>
    
    <category term="打工人" scheme="https://lakphy.github.io/blog/tags/%E6%89%93%E5%B7%A5%E4%BA%BA/"/>
    
    <category term="杂谈" scheme="https://lakphy.github.io/blog/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>记一次Hexo迁移踩坑</title>
    <link href="https://lakphy.github.io/blog/2022/07/19/%E8%AE%B0%E4%B8%80%E6%AC%A1Hexo%E8%BF%81%E7%A7%BB%E8%B8%A9%E5%9D%91/"/>
    <id>https://lakphy.github.io/blog/2022/07/19/%E8%AE%B0%E4%B8%80%E6%AC%A1Hexo%E8%BF%81%E7%A7%BB%E8%B8%A9%E5%9D%91/</id>
    <published>2022-07-19T13:33:56.000Z</published>
    <updated>2022-07-19T14:09:38.632Z</updated>
    
    <content type="html"><![CDATA[<p>又是将近一年没有更新博客了。。。<br>前几天重装系统，因为之前博客是没有备份的，所以我就顺便把博客备份到 onedrive 上，准备在 Mac 上重新把它跑起来，然后这事就搁置下了。<br>直到昨天才想起来 onedrive 上还有备份的博客，赶紧拿出来一看，<code>package.json</code>没备份，这下凉了。<br>因为我这个博客应该是 20 年初年起的项目，年代久远，没<code>package.json</code>大概率难找了。<br>于是我尝试用新版 Hexo 起项目，替换配置，结果出来一堆乱码，大概内容是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_partials/index.swig&#x27; as template %&#125; &#123;% block content %&#125;</span><br></pre></td></tr></table></figure><p>首先因为配置文件和主题年代问题，我首先想到的是主题老了，我就看了眼我魔改主题的底包,<a href="https://github.com/xzhih/hexo-theme-casper">hexo-casper</a>，结果 2 年前就停更了，这下寄了。<br>所以我决定换一套主题，毕竟我博客源文件还在问题不大。<br>搜了一圈，也就<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>能看的下去，但是性能太差了，我 12g 的小米 10 Chrome 用着都掉帧，这是我最不能忍受的。<br>没办法，我又回来看我这个陈年老博客。<br>之前因为年代久远，我主观臆断了，没使用搜索引擎，这次我一搜报错，才知道问题所在<br>万能的 Google 第一条就解决了我的问题：<br><img src="%E6%88%AA%E5%B1%8F2022-07-1922.01.36.png" alt="google"><br>这里引用一下<a href="https://stackoverflow.com/a/72195402/19579333">原答案</a>：</p><blockquote><p>I got the issue and solved it by installing hexo-renderer-swig manually.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-swig</span><br></pre></td></tr></table></figure></blockquote><p>我尝试了一下，完美解决问题，应该是缺少某些组件造成的问题<br>更让我震惊的是他的兼容性，我的主题是 2020 年初找的<a href="https://github.com/xzhih/hexo-theme-casper">hexo-casper</a>，并且基于此进行了魔改，在新版 hexo 上竟然完美运行<br>既然博客装回来了，今后一定多多更新！</p>]]></content>
    
    
    <summary type="html">记一次Hexo迁移踩坑</summary>
    
    
    
    
    <category term="踩坑记录" scheme="https://lakphy.github.io/blog/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    <category term="hexo" scheme="https://lakphy.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>你的第一个个人网站</title>
    <link href="https://lakphy.github.io/blog/2021/10/01/%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>https://lakphy.github.io/blog/2021/10/01/%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</id>
    <published>2021-10-01T05:37:11.000Z</published>
    <updated>2022-07-19T12:11:59.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的第一个个人网站—-Hexo"><a href="#你的第一个个人网站—-Hexo" class="headerlink" title="你的第一个个人网站—-Hexo"></a>你的第一个个人网站—-Hexo</h1><h2 id="建站概述"><a href="#建站概述" class="headerlink" title="建站概述"></a>建站概述</h2><p>看到网络上各式各样的网站，你是否有想过搭建一个属于自己的个人网站？你可以在自己的网站上，分享生活，交流学习，留下点点滴滴感动。如果你是一个程序员，或者想要未来成为程序员，作为一名“有灵魂”的程序员，拥有一个个人网站，那是必不可少的。我们先来介绍一下搭建一个网站需要什么技术。</p><p>现在主流的网站都是前后端分离式开发。</p><table><thead><tr><th>前端</th><th>后端</th></tr></thead><tbody><tr><td>页面元素、资源，接口调用（HTTP）</td><td>具体的实现逻辑、数据库，接口传递数据</td></tr></tbody></table><p>未来让自己的网站更加便捷</p><h3 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h3><p>前端基础技术包括 HTML、CSS、JavaScript 等</p><p>随着深入学习，这些技术无法满足我们的需要，于是就有了 TypeScript、React、Vue 等技术</p><h3 id="博客框架"><a href="#博客框架" class="headerlink" title="博客框架"></a>博客框架</h3><p>并不是所有人都熟悉前端开发，于是就有了博客框架，帮助我们低成本构建一个自己的博客，帮助创作者更集中精力于博客内容本身，输出更多优质文章。</p><p>博客分为静态博客和动态博客</p><h4 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h4><p>静态博客：仅仅有前端静态页面组成（Web 三件套：Html+Css+Js）。</p><ul><li><p>Hexo：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>Hexo 是一款基于 Node.js 的静态博客框架。</p></li><li><p>Jekyll：<a href="https://www.jekyll.com.cn/">https://www.jekyll.com.cn/</a></p><p>Jekyll 是一个基于 Ruby 环境的静态网站生成器</p></li><li><p>Hugo：<a href="https://www.gohugo.org/">https://www.gohugo.org/</a></p><p>Hugo 是由 Go 语言实现的静态网站生成器</p></li><li><p>VuePress：<a href="https://www.vuepress.cn/">https://www.vuepress.cn/</a></p><p>Vue 驱动的静态网站生成器。</p></li></ul><h4 id="动态博客"><a href="#动态博客" class="headerlink" title="动态博客"></a>动态博客</h4><p>动态博客：前后端配合开发的博客，可以进行后台管理。</p><ul><li><p>Wordpress：<a href="https://wordpress.org/">https://wordpress.org/</a></p><p>使用 PHP 语言+Mysql 开发的博客平台。亦可以作为 CMS 来使用。</p></li><li><p>你可以选择自己造轮子：JavaScript + SpringBoot + Mysql。</p></li></ul><h3 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo 博客框架"></a>Hexo 博客框架</h3><p>我们本节课将会介绍 Hexo 博客框架建造个人网站</p><p><a href="https://hexo.io/">https://hexo.io</a></p><p>Hexo 博客框架有以下特点</p><h4 id="静态博客-1"><a href="#静态博客-1" class="headerlink" title="静态博客"></a>静态博客</h4><p>Hexo 可以将你的博客编译成静态的一个文件夹，直接将他部署在 web 服务器中即可直接使用，无需部署后端。可以部署在 Github Pages 等平台，部署成本低，适合零基础入门和学习。</p><h4 id="生态强大"><a href="#生态强大" class="headerlink" title="生态强大"></a>生态强大</h4><p>Hexo 是生态最强大的博客框架之一，他拥有上千款主题和拓展插件可以使用，可拓展性很强，开发方便</p><h4 id="支持-MarkDown-语法"><a href="#支持-MarkDown-语法" class="headerlink" title="支持 MarkDown 语法"></a>支持 MarkDown 语法</h4><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，可以创造更加丰富的内容</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><h4 id="git-是个啥？"><a href="#git-是个啥？" class="headerlink" title="git 是个啥？"></a>git 是个啥？</h4><blockquote><p><strong>什么是 Git？</strong></p><p>GIT，全称是分布式版本控制系统。其实对于初学者就可以把它简单理解成一个云端的代码仓库，把你写的代码上传到云端仓库。</p><p>程序猿的世界里，自由、共享是一个基本的共识。而<strong>github</strong>是世界上最大的同性交友网站代码仓库，很多项目和框架都被放在上面。而我们所使用的 Hexo 框架以及一些插件都是要从 github 上面调用的。Git 就是这个版本控制软件，对于初学者来说，git 用来安装和克隆这些项目到本地，并且将本地代码推送到云端。</p><p><strong>关于 Github Pages</strong>：用于远程部署，使博客可以在网络上进行访问。</p><p><strong>使用 github pages 服务搭建博客的好处有：</strong></p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于 github 的；</li><li>数据绝对安全，基于 github 的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li></ol></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://git-scm.com/">git 官网</a></p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><h4 id="关于-Node-js"><a href="#关于-Node-js" class="headerlink" title="关于 Node.js"></a>关于 Node.js</h4><ul><li><p>Node.js 基本介绍：</p><p>Node.js 是一个 javascript 运行环境。它让 javascript 可以开发<strong>后端</strong>程序，实现几乎其他后端语言实现的所有功能，可以与 PHP、Java、Python、.NET、Ruby 等后端语言平起平坐。是一种较为简单、轻量和高效的后端服务实现方式。</p></li><li><p>很多开源的项目后台都是在 Node.js 的运行环境下运行的，比如 Hexo 的静态博客生成系统。相当于 jave 和 jvm（java 运行环境）的关系。</p></li><li><p>有相当成熟的社区文化和众多的开发者。</p></li><li><p>在开发一个复杂的应用程序的时候，我们需要把各个功能拆分、封装到不同的文件，在需要的时候引用该文件。没人会写一个几万行代码的文件，这样在可读性、复用性和维护性上都很差，几乎所有的编程语言都有自己的模块组织方式，比如 Java 中的包、C#中的程序集等，node.js 使用模块和包来组织，其机制实现参照了 CommonJS 标准，虽未完全遵守，但差距不大，使用起来非常简单。</p></li></ul><h4 id="关于-npm"><a href="#关于-npm" class="headerlink" title="关于 npm"></a>关于 npm</h4><ul><li><p>Npm（Node package management）即 node 的包管理器：</p></li><li><p>NPM 思路大概是这样的：</p><ol><li><p>买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码</p></li><li><p>发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</p></li><li><p>社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</p></li><li><p>下载完的代码出现在 <code>node_modules</code> 目录里，可以随意使用了。</p><p>这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。</p></li></ol></li><li><p>Hexo 也是被放在 npm 仓库里的，所以我们通过 npm 进行下载安装操作。</p></li></ul><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><a href="https://nodejs.org/zh-cn/download/">Node.js 官网</a></p><h4 id="npm-换源"><a href="#npm-换源" class="headerlink" title="npm 换源"></a>npm 换源</h4><p>由于某些我们懂得都懂的原因，在国内使用 npm 官方镜像源可能无法访问或者速度慢，所以我们需要将他切换到国内的镜像源，操作很简单，在 CMD 中输入以下命令即可将 npm 的镜像源切换到国内淘宝源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>按回车后命令行没有任何输出即代表设置成功</p><blockquote><p>没有任何输出就是最好的结果</p></blockquote><h5 id="备用方法"><a href="#备用方法" class="headerlink" title="备用方法"></a>备用方法</h5><p>由于某些原因，npm 修改镜像源可能无法生效，或者说你不想改动你的 npm 配置。这时候提供了一个解决方案是在<code>npm</code>中安装<code>cnpm</code>，在 CMD 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>按回车后出现了一些进度条和文字，我们无需在意，等待安装结束即可</p><p><img src="image-20211001093444248-1633066914648.png" alt="image-20211001093444248"></p><p>这样我们就安装了<code>cnpm</code>，如果你安装了<code>cnpm</code>，只需要将后面用到的命令中的<code>npm</code>改为<code>cnmp</code></p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>简称 vscode，是微软开发的开源的代码编辑器，支持多种语言，有大量插件可以安装，功能全面，是前端开发必备的工具。</p><p>（和 vs2010、vs2019 等不是一个东西）</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p><a href="https://code.visualstudio.com/">Visual Studio Code 官网</a></p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>Typora 是一款优秀的 Markdown 编辑器</p><p><a href="https://typora.io/">Typora 官网</a></p><h2 id="Hexo-的使用"><a href="#Hexo-的使用" class="headerlink" title="Hexo 的使用"></a>Hexo 的使用</h2><p><em>安装和使用过程建议以官方文档为准，本文仅作辅助</em></p><p><a href="https://hexo.io/zh-cn/">Hexo 官方中文文档</a></p><blockquote><p>查阅并通过文档获取知识和技术是一个有灵魂的程序员基本技能，这项技能是通过学习过程中不断积累出来的。</p><p>很多程序员只会写代码，没有灵魂，是因为他们只会老师教的，不会自己获取知识，编程技术更新迭代很快，如果没有自己阅读文档获取知识的能力，这样的程序员很快就会被时间淘汰掉。这也是编程补课班批量生产出来的程序员和其他程序员的本质区别。</p></blockquote><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>在 CMD 中运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g  hexo-cli</span><br></pre></td></tr></table></figure><p><code>-g</code>是全局安装的意思</p><p>之后就会出现进度条和一些文字，等待其完成安装。</p><p><img src="image-20211001093714184-1633066914649.png" alt="image-20211001093714184"></p><p>安装完成后，我们可以通过下面命令查看安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v  <span class="comment"># 查看Hexo版本</span></span><br></pre></td></tr></table></figure><p>正确输出结果如下</p><p><img src="image-20211001093851226-1633066914650.png" alt="image-20211001093851226"></p><p>这样，Hexo 博客框架就安装好了</p><h3 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h3><p>先将 CMD 的位置定位到你想要初始化博客的目录</p><p>比如，你想在 D 盘的 myblog 目录里面建立博客</p><p>首先新建文件夹</p><p>然后打开 CMD 命令窗口</p><p>输入命令切换操作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\myblog</span><br></pre></td></tr></table></figure><p>接着使用下面命令开始初始化博客文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>接着 hexo 开始构建内容</p><p><img src="image-20211001094951691-1633066914650.png" alt="image-20211001094951691"></p><p>网络良好的情况下很快就可以完成初始化</p><p>安装完成后，文件夹变成如下结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml// 整个博客的配置</span><br><span class="line">├── package.json// 项目所需模块项目的配置信息</span><br><span class="line">├── node_modules// 包含node依赖包的文件夹</span><br><span class="line">│   ├── ... // 若干node依赖包</span><br><span class="line">├── scaffolds// 命令生成文章的模板文件夹</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source// 用于存放创作的文章</span><br><span class="line">│   └── _posts</span><br><span class="line">│       └── hello-world.md</span><br><span class="line">├── themes// 存放主题的文件夹</span><br><span class="line">└── public// 存放hexo框架生成的静态文件</span><br><span class="line">    └──  ...</span><br></pre></td></tr></table></figure><p>这个时候，Hexo 就为我们生成了一个博客，通过下面操作可以预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如果出现以下提示</p><p><img src="image-20211001100914140-1633066914650.png" alt="image-20211001100914140"></p><p>点击允许访问即可。</p><p>可以看到命令行里出现这个</p><p><img src="image-20211001101010104-1633066914650.png" alt="image-20211001101010104"></p><p>这时候我们使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>即可看到博客样例</p><p><img src="image-20211001101252815-1633066914651.png" alt="image-20211001101252815"></p><p>当然这并不是我们想要的样子，就像我们买到一台新手机一样，我们需要对 Hexo 进行配置</p><h3 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h3><p>博客目录下的<code>_config.yml</code>是整个博客的配置文件。</p><p>右键选择 vscode 打开便可以编辑配置文件</p><p><strong><em><u>请不要使用 Windows 记事本编辑此文件！！！！！</u></em></strong></p><p><img src="image-20211001101722815-1633066914650.png" alt="image-20211001101722815"></p><p><img src="image-20211001101746970-1633066914650.png" alt="image-20211001101746970"></p><p>下面开始配置 hexo，这里只讲述初次使用者必需的部分，更多进阶操作请访问<a href="https://hexo.io/">hexo 官方网站</a>。</p><h4 id="Site："><a href="#Site：" class="headerlink" title="# Site："></a># Site：</h4><table><thead><tr><th align="left">属性名称</th><th align="left">描述</th><th align="left">常用属性值</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">博客/网站的标题</td><td align="left">你自己的 Blog 标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">博客/网站副标题</td><td align="left">-</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站、博客的描述</td><td align="left">-</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">关键字</td><td align="left">网站的关键词，使用半角逗号分隔开多个关键词，关键词对 SEO 的优化有一定的作用</td></tr><tr><td align="left"><code>author</code></td><td align="left">作者</td><td align="left"></td></tr><tr><td align="left"><code>language</code></td><td align="left">语言</td><td align="left">默认 en；建议改成<code>zh-CN</code>（中文）</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区</td><td align="left">Hexo 默认使用您电脑的时区。也可换成<code>America/New_York</code>, <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><blockquote><p>其中，<code>title</code>：网站的名字，会写在<code>hexo generator</code>命令生成后的 public 文件夹下的 index.html 文件的 title 标签里</p><p><code>description</code>主要用于 SEO(即：搜索引擎优化)，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p></blockquote><h4 id="URL："><a href="#URL：" class="headerlink" title="# URL："></a># URL：</h4><table><thead><tr><th>属性名称</th><th>描述</th><th>常用属性值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td>-</td></tr><tr><td><code>root</code></td><td>网站根目录</td><td>-</td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td><code>pretty_urls</code></td><td>改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td></td></tr><tr><td><code>pretty_urls.trailing_index</code></td><td>是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td><code>true</code></td></tr><tr><td><code>pretty_urls.trailing_html</code></td><td>是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td><code>true</code></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span></span><br></pre></td></tr></table></figure><blockquote><p>可以注意到，<code>permalink</code>是文章的永久链接格式，可以在 permalink 这里配置，如默认中的配置，在 hello world 文章中就会是这样的 url：<code>http://localhost:4000/2020/09/26/hello-world/</code></p><p>同时，在使用 hexo g 生成的 public 文件夹里面，文件夹的层级也会按这个配置:</p></blockquote><p>[<img src="20201124214020-1633066914650.png" alt="image-20201003230255713">]</p><h4 id="Directory："><a href="#Directory：" class="headerlink" title="# Directory："></a># Directory：</h4><table><thead><tr><th>属性名称</th><th>描述</th><th>常用属性值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，存放 hexo 文章的文件夹，我们写的 md 文件都放在这个配置对应的文件夹下。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放<code>hexo g</code>生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹，按标签存放文章的目录，在给文章添加<code>tags</code>标签后会有</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹，按分类存放文章的目录，在给文章添加<code>category</code>标签后会有</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><blockquote><p><strong>提示:</strong></p><p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。<br>没到自己制作 theme 的水平别修改！</p></blockquote><h4 id="Writing："><a href="#Writing：" class="headerlink" title="# Writing："></a># Writing：</h4><table><thead><tr><th align="left">属性名称</th><th align="left">描述</th><th align="left">常用属性值</th></tr></thead><tbody><tr><td align="left"><code>new_post_name</code></td><td align="left">新文章的文件名称</td><td align="left">:title.md</td></tr><tr><td align="left"><code>default_layout</code></td><td align="left">预设布局</td><td align="left">post</td></tr><tr><td align="left"><code>auto_spacing</code></td><td align="left">在中文和英文之间加入空格</td><td align="left">false</td></tr><tr><td align="left"><code>titlecase</code></td><td align="left">把标题转换为 title case</td><td align="left">false</td></tr><tr><td align="left"><code>external_link</code></td><td align="left">在新标签中打开链接</td><td align="left">true</td></tr><tr><td align="left"><code>external_link.enable</code></td><td align="left">在新标签中打开链接</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>external_link.field</code></td><td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td align="left"><code>site</code></td></tr><tr><td align="left"><code>external_link.exclude</code></td><td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td><td align="left"><code>[]</code></td></tr><tr><td align="left"><code>filename_case</code></td><td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td><td align="left">0</td></tr><tr><td align="left"><code>render_drafts</code></td><td align="left">显示草稿</td><td align="left">false</td></tr><tr><td align="left"><code>post_asset_folder</code></td><td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td><td align="left">false</td></tr><tr><td align="left"><code>relative_link</code></td><td align="left">把链接改为与根目录的相对位址</td><td align="left">false</td></tr><tr><td align="left"><code>future</code></td><td align="left">显示未来的文章</td><td align="left">true</td></tr><tr><td align="left"><code>highlight</code></td><td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> section for usage guide</td><td align="left"></td></tr><tr><td align="left"><code>prismjs</code></td><td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> section for usage guide</td><td align="left"></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><blockquote><p><strong>new_post_name</strong>：新文章的默认名称，我们是使用 hexo new 来构造文章的，生成的文章名就是通过这里配置的，默认为: <code>title.md</code>，<a href="http://也就是标题.md/">也就是标题.md</a></p></blockquote><blockquote><p><strong>default_layout</strong>：预设布局，<code>hexo new</code>可以创建三种文件，post/帖子，draft/草稿，page/页面，这里设置默认值在使用<code>hexo new</code>就可以直接创建对应默认类型的文章，设置了 post 就等同于说在命令行执行<code>hexo new &lt;name&gt;</code>和执行<code>hexo new post &lt;name&gt;</code>是一样的，也可以设置为 draft 和 page</p></blockquote><blockquote><p><strong>post_asset_folder</strong>：是否启动资源文件夹，对于我们的网站，如果我们的文章里面有图片，我们可以在 source 文件夹下建立一个统一的 images 文件夹来存放图片，但是如果有的文章有很多的资源文件如图片，我们可以通过设置该配置为 true，这样在 source 文件夹下创建文件的同时也会创建一个同名文件夹来存放相应的资源，比如我设置为 true，然后执行 hexo new newPost</p></blockquote><blockquote><p><strong>highlight</strong>：代码块的设置</p><ul><li><code>enable</code>：开启代码高亮，默认为 true</li><li><code>auto_detect</code>：如果未指定语言，就自动检测，默认为 false</li><li><code>line_number</code>：显示代码的行数，默认为 true</li><li><code>tab_replace</code>：用 n 个空格来代表 tab 键，如果值为空，则不会代替 tab 键</li><li><code>wrap</code>：是否将代码放在 table 标签里，默认为 true</li><li><code>hljs</code>：是否对 CSS 类使用 hljs-*前缀，默认为 false</li></ul></blockquote><h4 id="Home-page-setting："><a href="#Home-page-setting：" class="headerlink" title="# Home page setting："></a># Home page setting：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  Home page setting</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><p><strong>index_generator</strong>：主页相关的设置</p><blockquote><p><code>path</code>：主页对应的路径，默认为’’，即域名根目录就是主页的路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">per_page`：每页显示的帖子数，默认为10</span></span><br></pre></td></tr></table></figure><p><code>order_by</code>：帖子的排序，默认为-date，即按日期倒序排</p></blockquote><h4 id="Category-amp-Tag"><a href="#Category-amp-Tag" class="headerlink" title="# Category &amp; Tag"></a># Category &amp; Tag</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认分类</span></span><br><span class="line"><span class="attr">category_map:</span> <span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签别名</span></span><br></pre></td></tr></table></figure><p>是否在页面开头插入 meta 标签，默认为 true</p><h4 id="Metadata-elements"><a href="#Metadata-elements" class="headerlink" title="# Metadata elements"></a># Metadata elements</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Date-Time-format"><a href="#Date-Time-format" class="headerlink" title="# Date / Time format"></a># Date / Time format</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>date_format</strong>：日期格式，默认为 YYYY-MM-DD，即年月日<br><strong>time_format</strong>：时间格式，默认为 HH:mm:ss，即时分秒<br><strong>use_date_for_updated</strong>：启用以后，如果 Front Matter 中没有指定 updated（文件更新日期），post.updated 将会使用 date 的值而不是文件的创建时间，默认值为 true</p></blockquote><h4 id="Pagination"><a href="#Pagination" class="headerlink" title="# Pagination"></a># Pagination</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>per_page</strong>：分页时每页的文章数，如果为 0 则不分页，默认为 10<br><strong>pagination_dir</strong>: 分页的目录，默认为 page，对应于 public 文件夹下的 archives 文件夹下的 page 文件夹，如果只有一页是不会生成这个文件夹的</p></blockquote><h4 id="Include-Exclude-file-s"><a href="#Include-Exclude-file-s" class="headerlink" title="# Include / Exclude file(s)"></a># Include / Exclude file(s)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>include</strong>：Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。<br><strong>exclude</strong>：Hexo 会忽略这些文件和目录<br><strong>ignore</strong>：忽略的文件<br>要注意的是，这里要写入的是数组，而 yaml 的数组要用-值表示数组中一个元素或者直接采用 js 中数组的写法[]</p></blockquote><h4 id="Extensions"><a href="#Extensions" class="headerlink" title="# Extensions"></a># Extensions</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>theme</strong>当前主题名称。值为<code>false</code>时禁用主题。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>deploy</strong>部署部分的设置</p></blockquote><p>这里给出一个最后远端部署 github 的配置例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># 库地址</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>] <span class="comment"># 分支名称</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>] <span class="comment"># 自定义提交信息</span></span><br></pre></td></tr></table></figure><h3 id="开始创作"><a href="#开始创作" class="headerlink" title="开始创作"></a>开始创作</h3><p>使用下面命令新建文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;你的第一个个人网站&quot;</span></span><br></pre></td></tr></table></figure><p>注意使用英文引号</p><p><img src="image-20211001105153297-1633066914650.png" alt="image-20211001105153297"></p><blockquote><p>注意：新建一篇文章。完整的命令其实是：<code>$ hexo new [layout] &lt;title&gt;</code>，其中<code>layout</code>可以忽略不写。</p><p>如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替（默认是 post）。</p><p>如果标题包含空格的话，请使用引号括起来。</p><p><strong>关于文章模板</strong></p><p>在新建文章中使用的<code>post</code>参数，就是模板的名称，在使用<code>hexo new post &lt;title&gt;</code>命令进行新建文章时，系统会自动在<code>scaffolds</code>文件夹中搜寻名为<code>post</code>的文件，根据其中的内容生成新的<code>.md</code>文章文件。后续随着配置项的增多，可以自行设置不同类型的模板。</p></blockquote><p>之后你就可以在<code>/source/_posts</code>文件夹中看到你新建的博客 Markdown 文件，比如 <code>你的第一个个人网站.md</code></p><p>使用 Typora 软件打开你新建的博客。</p><p>可以看到如下内容</p><p><img src="image-20211001105549529-1633066914651.png" alt="image-20211001105549529"></p><p>如图所示框内内容为文章配置信息</p><p><img src="image-20211001110032358-1633066914651.png" alt="image-20211001110032358"></p><p>其中<code>title</code>是标题，<code>date</code>是时间，<code>tags</code>是标签</p><p>其中 tags 可以设置多个</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Markdown</span></span><br></pre></td></tr></table></figure><p>上面是一些基本配置，根据你的博客主题不同，博客主题可能会需要更多其他配置参数，来丰富其功能</p><p>之后你便可以创作啦</p><p>创作之后可以通过后续讲解的操作来预览和发布</p><h3 id="预览和发布"><a href="#预览和发布" class="headerlink" title="预览和发布"></a>预览和发布</h3><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p>使用下面的命令可以本地预览博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如果出现以下提示</p><p><img src="image-20211001100914140-1633066914650.png" alt="image-20211001100914140"></p><p>点击允许访问即可。</p><p>可以看到命令行里出现这个</p><p><img src="image-20211001101010104-1633066914650.png" alt="image-20211001101010104"></p><p>这时候我们使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>即可看到博客样例</p><p><img src="image-20211001101252815-1633066914651.png" alt="image-20211001101252815"></p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><p>使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>可以在<code>/public</code>文件夹生成静态文件，我们可以将这个静态文件放到我们的 web 服务器或 pages 中，就可以远程访问了。</p><p><img src="image-20211001113722685-1633066914651.png" alt="image-20211001113722685"></p><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>生成静态文件后，我们选择 GitHub Pages 展示博客，<a href="#Github-Pages">后面内容将会介绍</a></p><h3 id="主题和个性化"><a href="#主题和个性化" class="headerlink" title="主题和个性化"></a>主题和个性化</h3><p>hexo 初始化后默认的主题样式可以在<code>_config.yml</code>中的 theme 中看到，是<code>landscape</code>。</p><p><img src="image-20211001114234481-1633066914651.png" alt="image-20211001114234481"></p><p>你可以在 github 上搜索其他的主题，克隆下来，并进行配置。</p><p>关于主题我们可以在 hexo 官网上搜索，但更建议直接在 github 上搜索 hexo-theme，选择 most-stars 筛选出最受欢迎的，在一次浏览各个 Demp 去找到你最喜欢的一个主题样式。</p><p><img src="image-20211001132458269-1633066914651.png" alt="image-20211001132458269"></p><p>这里选择一个我比较喜欢的样式作为例子。</p><p>github 搜索**<a href="https://github.com/jerryc127/hexo-theme-butterfly"> hexo-theme-butterfly</a>**</p><p><img src="image-20211001132555237-1633066914651.png" alt="image-20211001132555237"></p><blockquote><p>新手其实推荐使用 Next 主题，因为这是最受欢迎的，所以他的参考资料最多。</p><p>我选择 Butterfly，首先这是一款由中国人开发的主题，对于中文的兼容性比较好。其次他的样式我比较喜欢。另外他的更新频率很高。</p></blockquote><p><strong>更换主题的命令如下：</strong></p><p>在博客的根目录下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><blockquote><p>其他的主题克隆命令类同，可以自行阅读文档。</p></blockquote><p><strong>应用主题：</strong></p><p>修改站点配置文件<code>_config.yml</code>，把主题改为<code>butterfly</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p><strong>安装插件：</strong><br>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><strong>升级建议：</strong><br>因为主题经常会更新，为了防止每次更新替换掉原来配置好的<code>_config.yml</code>,可以通过以下方式避免被替换掉。</p><blockquote><p>如果已经在 <code>source/_data/</code> 创建了 <code>butterfly.yml</code>，请记得删除掉。</p></blockquote><p>首先， 把主题文件夹中的 <code>_config.yml</code> 复制到 <strong>Hexo</strong> 根目录里，同时重新命名为 <code>_config.butterfly.yml</code>。</p><p>以后只需要在 <code>_config.butterfly.yml</code>进行配置就行。</p><p>因为 Hexo 会自动合并主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高，这样就能防止更新主题的时候，主题目录下的配置被更新，丢失之前的配置。</p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>首先在 blog 目录下使用终端安装一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="image-20211001132120524-1633066914652.png" alt="image-20211001132120524"></p><p>然后配置根目录下的<code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">....</span>      <span class="comment"># 你的repository地址（建议ssh）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  <span class="comment"># 你的项目branch，默认是master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure><p>接着，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>根据提示输入你的 github 账号密码或者 ssh 私钥对应的密码，即可上传到云端。</p><blockquote><p>注意：在要求输入密码时，你输入之后密码是不显示的，这是为了安全，并非是你没输上。</p></blockquote><p>最后，刷新你的仓库，可以看到你博客的 public\文件夹下内容已经上传成功，进入 settings 查看 github pages，可以看到已经绑定好了外域名，点开该域名即可访问。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="如何在博客中插入图片"><a href="#如何在博客中插入图片" class="headerlink" title="如何在博客中插入图片"></a>如何在博客中插入图片</h3><h4 id="使用-hexo-资源文件夹"><a href="#使用-hexo-资源文件夹" class="headerlink" title="使用 hexo 资源文件夹"></a>使用 hexo 资源文件夹</h4><ul><li><p>第一步：安装插件，在 hexo 根目录打开终端,执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>第二步：打开 hexo 的配置文件<code>_config.yml</code></p></li></ul><p>找到 <code>post_asset_folder</code>，把这个选项从<code>false</code>改成<code>true</code></p><ul><li><p><img src="20201124214023-1633066914652.png" alt="image-20201005000457975">XXXX.md<code>博文时就会在</code>/source/_posts<code>目录下生成</code>XXXXXX<code>的文件夹，将你想在</code>XXXXX`博文中插入的图片放置到这个同名文件夹中即可，图片的命名随意。</p></li><li><p>第四步：<strong>添加图片</strong>：在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code>。</p><p><img src="20201124214024-1633066914652.png" alt="image-20201005002150822"></p></li></ul><h4 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h4><p>不做详细介绍</p><h3 id="更多？"><a href="#更多？" class="headerlink" title="更多？"></a>更多？</h3><p>欢迎补充</p><h2 id="内容参考"><a href="#内容参考" class="headerlink" title="内容参考"></a>内容参考</h2><p>部分内容来自</p><ul><li><a href="https://zlhad.top/2020/10/05/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">https://zlhad.top/2020/10/05/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a></li><li><a href="https://lakphy.me/blog/2019/06/09/Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/">https://lakphy.me/blog/2019/06/09/Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;你的第一个个人网站—-Hexo&quot;&gt;&lt;a href=&quot;#你的第一个个人网站—-Hexo&quot; class=&quot;headerlink&quot; title=&quot;你的第一个个人网站—-Hexo&quot;&gt;&lt;/a&gt;你的第一个个人网站—-Hexo&lt;/h1&gt;&lt;h2 id=&quot;建站概述&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="踩坑记录" scheme="https://lakphy.github.io/blog/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    <category term="hexo" scheme="https://lakphy.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow简单入门</title>
    <link href="https://lakphy.github.io/blog/2021/01/25/TensorFlow%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <id>https://lakphy.github.io/blog/2021/01/25/TensorFlow%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</id>
    <published>2021-01-25T05:37:31.000Z</published>
    <updated>2022-07-19T12:11:59.197Z</updated>
    
    <content type="html"><![CDATA[<p>近期恰逢Google组织第三季TensorFlow Study Jam活动，再加上一直想学TensorFlow，就这么入坑了</p><p>此处仅作学习笔记使用，仅作参考，初学还是建议跟一遍TensorFlow的官方MOOC教程。</p><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><h3 id="个人技能"><a href="#个人技能" class="headerlink" title="个人技能"></a>个人技能</h3><ol><li><p>有Python基础</p></li><li><p>了解机器学习相关知识</p></li></ol><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>这里为了方便，使用 Python3 和 JupyterNotebook。</p><p>Python3自然是为了运行代码</p><p>Jupyter Notebook是用来看教程的，Internet上很多教程都是写在Jupyter Notebook上面的，而且Jupyter Notebook的Python运行机制很方便使用（虽然运行速度是慢了些）</p><h3 id="实训平台"><a href="#实训平台" class="headerlink" title="实训平台"></a>实训平台</h3><p>这里可以有很多选择，这里推荐两个</p><ol><li><p>中国大学MOOC上网易与TensorFlow联合打造的在线实训平台，每天有两小时使用时间（免费）<a href="https://ot.icourse163.org/#/course">https://ot.icourse163.org/#/course</a></p></li><li><p>阿里天池实训平台<a href="https://tianchi.aliyun.com/education">https://tianchi.aliyun.com/education</a></p></li></ol><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Windows用户：自行下载Python.exe</p><p>Ubuntu用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python3</span><br></pre></td></tr></table></figure><h3 id="安装TensorFlow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow"></a>安装TensorFlow</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure><h3 id="JupyterNotebook"><a href="#JupyterNotebook" class="headerlink" title="JupyterNotebook"></a>JupyterNotebook</h3><p>这里仅提供Ubuntu方案,Windwos用户请自行摸索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h2 id="从简单例子开始"><a href="#从简单例子开始" class="headerlink" title="从简单例子开始"></a>从简单例子开始</h2><p>先看一个代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([keras.layers.Dense(units=<span class="number">1</span>, input_shape=[<span class="number">1</span>])])</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;sgd&#x27;</span>, loss=<span class="string">&#x27;mean_squared_error&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xs = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>], dtype=<span class="built_in">float</span>)</span><br><span class="line">ys = np.array([<span class="number">1.0</span>, <span class="number">1.5</span>, <span class="number">2.0</span>, <span class="number">2.5</span>, <span class="number">3.0</span>, <span class="number">3.5</span>], dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">model.fit(xs, ys, epochs=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.predict([<span class="number">7.0</span>]))</span><br></pre></td></tr></table></figure><p>先观察这个代码，不需要理解，之后我会逐行讲解</p><p>这些代码的用途是训练一个可以计算一次函数的机器学习</p><p>下面我们开始逐句讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br></pre></td></tr></table></figure><p>这句的意思是引入tensorflow和numpy的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([keras.layers.Dense(units=<span class="number">1</span>, input_shape=[<span class="number">1</span>])])</span><br></pre></td></tr></table></figure><h1 id="锅没写完，未完待续。。。。。"><a href="#锅没写完，未完待续。。。。。" class="headerlink" title="锅没写完，未完待续。。。。。"></a>锅没写完，未完待续。。。。。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期恰逢Google组织第三季TensorFlow Study Jam活动，再加上一直想学TensorFlow，就这么入坑了&lt;/p&gt;
&lt;p&gt;此处仅作学习笔记使用，仅作参考，初学还是建议跟一遍TensorFlow的官方MOOC教程。&lt;/p&gt;
&lt;h2 id=&quot;前提准备&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="TensorFlow" scheme="https://lakphy.github.io/blog/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>利用iPhone线性震动马达制作骨传导耳机</title>
    <link href="https://lakphy.github.io/blog/2020/12/23/%E5%88%A9%E7%94%A8iPhone%E7%BA%BF%E6%80%A7%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BE%E5%88%B6%E4%BD%9C%E9%AA%A8%E4%BC%A0%E5%AF%BC%E8%80%B3%E6%9C%BA/"/>
    <id>https://lakphy.github.io/blog/2020/12/23/%E5%88%A9%E7%94%A8iPhone%E7%BA%BF%E6%80%A7%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BE%E5%88%B6%E4%BD%9C%E9%AA%A8%E4%BC%A0%E5%AF%BC%E8%80%B3%E6%9C%BA/</id>
    <published>2020-12-23T10:47:06.000Z</published>
    <updated>2022-07-19T12:11:59.298Z</updated>
    
    <content type="html"><![CDATA[<p>北京时间2015年9月10日凌晨1点，苹果公司在旧金山的比尔·格雷厄姆市政礼堂举行2015苹果秋季新品发布会。本次发布会中，发布了新品iPhone 6s、iPhone 6s Plus，Apple Watch更多的表带和机身款式、12.9英寸的iPad Pro、全新可以打游戏的Apple TV。其中，iPhone 6s与iPhone 6s Plus为广大果粉带来了诸多“黑科技”：3D touch、1200万像素后置摄像头、livephoto与4K摄录、强劲的A9处理器……这让去年因iPhone 6和5s相比提高不大而郁闷了一年的果粉们过足了瘾。然而，有一项真正名副其实的“黑科技”却被大众忽略了，甚至在发布会上也只是被一笔带过，那就是——<strong>Taptic Engine</strong>。</p><p><img src="v2-c2a62b1ba82fbf82893798957c251c31_r.jpg" alt="img"></p><p>这个Taptic Engine就是我们这篇文章的主角，就是线性震动马达。在苹果之后发布的产品中都会看到它，可以说，它是苹果之后发布的产品的灵魂，大幅提升了苹果产品的体验。</p><p>以致于苹果公司不惜浪费大量空间，在<a href="https://www.apple.com.cn/watch/">Apple Watch</a>中也加入了Taptic Engine。</p><p><img src="v2-7fa87540e4a6d81ecc67bfdf907c29c9_r.jpg" alt="img"></p><p>甚至在iPhone7之后，苹果使用来模拟实体按键按下的感觉。可见Taptic Engine的动力强劲。</p><p>这篇我们来利用Taptic Engine来制作骨传导耳机。</p><h1 id="目标成品"><a href="#目标成品" class="headerlink" title="目标成品"></a>目标成品</h1><p>目标为制作一个利用Taptic Engine震动发声的骨传导耳机。</p><p>成品如图</p><p><img src="1608721324144.jpg" alt="1608721324144"></p><h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><p>建议材料一览：</p><ol><li>iPhone 的 Taptic Engine 线性震动马达 *4</li><li><strong>能用就行</strong>的3.5mm耳机线 *1</li><li>功放板 *1</li><li>USB供电线 *1</li></ol><p><img src="1608721324085.jpg" alt="1608721324085"></p><h2 id="Taptic-Engine"><a href="#Taptic-Engine" class="headerlink" title="Taptic Engine"></a>Taptic Engine</h2><p>这里建议选择选择iPhone7Plus的Taptic Engine，主要原因是在iPhone7系列上苹果首次取消home键，并用Taptic Engine模拟home键按下的震动效果，再加上plus版本身就要大一些，选择iPhone7Plus的Taptic Engine是性价比较高的选择。我图中列出的Taptic Engine售价<code>4</code>RMB/个，据说是买贵了，读者可以自行上某宝寻找便宜的可靠的商家。</p><p>关于Taptic Engine的购买数量，按照需求，应该是只要两块就够了，但由于Taptic Engine的触点不好焊接，虽然焊接这个事情是右手就行，但手有时候也会丢，建议买4个备用，两个焊接两个备用。我个人是买了4个，焊废了1个。</p><p><img src="1608721324262.jpg" alt="1608721324262"></p><h2 id="3-5mm耳机线"><a href="#3-5mm耳机线" class="headerlink" title="3.5mm耳机线"></a>3.5mm耳机线</h2><p>这个要求不高，能响就行，另外建议不要买带线控的耳机，不方便改造。</p><h2 id="功放板"><a href="#功放板" class="headerlink" title="功放板"></a>功放板</h2><p>前面放的那个板子是一个比较廉价的解决方案</p><p><img src="/1608721324223.jpg" alt="1608721324223"></p><p>另外可以使用下面这个板子，贵两块，多一个电位器，可以调节音量。</p><p><img src="/1608721324134.jpg" alt="1608721324134"></p><h2 id="USB供电线"><a href="#USB供电线" class="headerlink" title="USB供电线"></a>USB供电线</h2><p>这个啊，也是能用就行，要求只是有一个USB头就行了，方便用充电宝供电，可以像我一样选择USB转DC的供电线，之后再把DC头剪掉就行了。</p><h1 id="开始焊接"><a href="#开始焊接" class="headerlink" title="开始焊接"></a>开始焊接</h1><h2 id="焊接马达触点"><a href="#焊接马达触点" class="headerlink" title="焊接马达触点"></a>焊接马达触点</h2><p>马达有两种焊接方式，任选一种焊接方式即可</p><h3 id="1、马达侧部"><a href="#1、马达侧部" class="headerlink" title="1、马达侧部"></a>1、马达侧部</h3><p><img src="/image-20201223193447349.png" alt="image-20201223193447349"></p><p>马达侧部</p><p><img src="/image-20201223193108786.png" alt="image-20201223193108786"></p><p>这里可以发现侧部有6个触点，我们使用左右两个触点，不分正负极</p><p>将耳机线的分支部分剪下，剖开首尾两部，会发现里面有两根线，在线头和触点上点一些焊锡，然后焊接在左右两触点上即可</p><p><img src="/1608721324173-1610286359255.jpg" alt="1608721324173"><img src="/1608721324232.jpg" alt="1608721324232"></p><h3 id="2、马达排线上"><a href="#2、马达排线上" class="headerlink" title="2、马达排线上"></a>2、马达排线上</h3><p><img src="/image-20210110214759250.png" alt="image-20210110214759250"></p><p>如图，这里时马达的排线，我们用小刀等工具将其表面划开</p><p><img src="/image-20210110214926296.png" alt="image-20210110214926296"></p><p>完事以后就是这个样子，这就是我们要的两个触点，不分正负极。</p><p>将耳机线的分支部分剪下，剖开首尾两部，会发现里面有两根线，在线头和触点上点一些焊锡，然后焊接在左右两触点上即可<img src="/1608721324173-1610286359255.jpg" alt="1608721324173"></p><h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><ol><li>此步焊接较为复杂，也容易损坏马达，建议多备几个马达（某同学已经挂了好几块了）</li><li>由于焊点较近，建议焊接完成后用万用表测试一下，以防短路/断路</li><li>建议焊完并测试无误后直接上胶枪粘死，以防线松</li></ol><h2 id="焊接功放板"><a href="#焊接功放板" class="headerlink" title="焊接功放板"></a>焊接功放板</h2><h1 id="施工ing……-未完待续"><a href="#施工ing……-未完待续" class="headerlink" title="施工ing…….未完待续"></a>施工ing…….未完待续</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;北京时间2015年9月10日凌晨1点，苹果公司在旧金山的比尔·格雷厄姆市政礼堂举行2015苹果秋季新品发布会。本次发布会中，发布了新品iPhone 6s、iPhone 6s Plus，Apple Watch更多的表带和机身款式、12.9英寸的iPad Pro、全新可以打游戏</summary>
      
    
    
    
    
    <category term="电子" scheme="https://lakphy.github.io/blog/tags/%E7%94%B5%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>C语言常见文件处理</title>
    <link href="https://lakphy.github.io/blog/2020/12/20/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>https://lakphy.github.io/blog/2020/12/20/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-12-20T04:50:22.000Z</published>
    <updated>2022-07-19T12:11:59.185Z</updated>
    
    <content type="html"><![CDATA[<p>每个编程语言学到文件操作、字符串操作、网络连接什么什么的就开始有各种各样的库函数需要记忆，有的比较常用还比较好记，有的遇到了却没记住，那就只能请教Google了。但考试时候不能Google，本篇旨在总结C语言中常见的文件处理操作，便于查阅和记忆。</p><ul><li><a href="#file%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B">FILE文件类型</a></li><li><a href="#fopen-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6">fopen() 打开文件</a></li><li><a href="#fclose-%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6">fclose() 关闭文件</a></li><li><a href="#fputc-%E5%B0%86%E5%AD%97%E7%AC%A6%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6">fputc() 将字符写入文件</a></li><li><a href="#fputs-%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6">fputs() 将字符串写入文件</a></li><li><a href="#fprintf-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%86%99%E5%85%A5">fprintf() 格式化写入</a></li><li><a href="#fgetc-%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6">fgetc() 从文件中读取字符</a></li><li><a href="#fgets-%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2">fgets() 从文件中读取字符串</a></li><li><a href="#fscanf-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%AF%BB%E5%8F%96">fscanf() 格式化读取</a></li><li><a href="#fwrite-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%86%99%E5%85%A5">fwrite() 二进制写入</a></li><li><a href="#fread-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%AF%BB%E5%8F%96">fread() 二进制读取</a></li><li><a href="#rewind-%E4%BD%8D%E7%BD%AE%E6%8C%87%E9%92%88%E6%8C%87%E5%90%91%E6%96%87%E4%BB%B6%E5%A4%B4">rewind() 位置指针指向文件头</a></li><li><a href="#fseek-%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%8C%87%E9%92%88">fseek() 改变文件位置指针</a></li><li><a href="#ftell-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%8C%87%E9%92%88%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%96%87%E4%BB%B6%E5%A4%B4%E7%9A%84%E4%BD%8D%E7%BD%AE">ftell() 获取文件位置指针相对于文件头的位置</a></li><li><a href="#fflush-%E5%88%B7%E6%96%B0%E6%B5%81-stream-%E7%9A%84%E8%BE%93%E5%87%BA%E7%BC%93%E5%86%B2%E5%8C%BA">fflush() 刷新流 stream 的输出缓冲区</a></li><li><a href="#feof-%E6%B5%8B%E8%AF%95%E7%BB%99%E5%AE%9A%E6%B5%81-stream-%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AF%86%E7%AC%A6">feof() 测试给定流 stream 的文件结束标识符</a></li><li><a href="#freopen">freopen()</a></li><li><a href="#remove-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6">remove() 删除文件</a></li><li><a href="#rename-%E9%87%8D%E5%91%BD%E5%90%8D%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6">rename() 重命名/移动文件</a></li></ul><h2 id="FILE文件类型"><a href="#FILE文件类型" class="headerlink" title="FILE文件类型"></a>FILE文件类型</h2><p>FILE类型是一个用来表示文件的结构体</p><p>其在TC2.0编译器中的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  &#123;</span></span><br><span class="line">        <span class="type">short</span>           level;          <span class="comment">/* fill/empty level of buffer */</span></span><br><span class="line">        <span class="type">unsigned</span>        flags;          <span class="comment">/* File status flags    */</span></span><br><span class="line">        <span class="type">char</span>            fd;             <span class="comment">/* File descriptor      */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>   hold;           <span class="comment">/* Ungetc char if no buffer */</span></span><br><span class="line">        <span class="type">short</span>           bsize;          <span class="comment">/* Buffer size          */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>   *buffer;        <span class="comment">/* Data transfer buffer */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>   *curp;          <span class="comment">/* Current active pointer */</span></span><br><span class="line">        <span class="type">unsigned</span>        istemp;         <span class="comment">/* Temporary file indicator */</span></span><br><span class="line">        <span class="type">short</span>           token;          <span class="comment">/* Used for validity checking */</span></span><br><span class="line">&#125;       FILE;                           <span class="comment">/* This is the FILE object */</span></span><br></pre></td></tr></table></figure><p>其在VC6.0编译器中的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> &#123;</span></span><br><span class="line">　　　　<span class="type">char</span> *_ptr; <span class="comment">//文件输入的下一个位置</span></span><br><span class="line">　　　　<span class="type">int</span> _cnt; <span class="comment">//当前缓冲区的相对位置</span></span><br><span class="line">　　　　<span class="type">char</span> *_base; <span class="comment">//指基础位置(即是文件的起始位置)</span></span><br><span class="line">　　　　<span class="type">int</span> _flag; <span class="comment">//文件标志</span></span><br><span class="line">　　　　<span class="type">int</span> _file; <span class="comment">//文件的有效性验证</span></span><br><span class="line">　　　　<span class="type">int</span> _charbuf; <span class="comment">//检查缓冲区状况,如果无缓冲区则不读取</span></span><br><span class="line">　　　　<span class="type">int</span> _bufsiz; <span class="comment">//</span></span><br><span class="line">　　　　<span class="type">char</span> *_tmpfname; <span class="comment">//临时文件名</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> <span class="title">FILE</span>;</span></span><br></pre></td></tr></table></figure><p>在日常使用中，FILE类型常以指针形式使用。</p><h2 id="fopen-打开文件"><a href="#fopen-打开文件" class="headerlink" title="fopen() 打开文件"></a>fopen() 打开文件</h2><p>该函数用于打开一个文件，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> * mode )</span>;</span><br></pre></td></tr></table></figure><p>该函数接收两个字符串类型参数，函数将会打开一个文件，并将建立这个文件的FILE类型变量，并且返回一个指向该变量的FILE类型指针。</p><p>其中，</p><p><code>filename</code>表示文件地址，数据类型为字符串，允许使用相对地址或绝对地址。例如在Windows系统下<code>&quot;D:\\data\\file.txt&quot;</code>可以用来表示地址，在Linux系统下<code>&quot;/mnt/test.txt&quot;</code>可以用来表示地址；</p><p><code>mode</code>表示访问模式，数据类型为字符串，它的值可以为下列几种：</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td align="left">w</td><td align="left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td align="left">a</td><td align="left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文本文件，允许读写文件。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr><tr><td align="left">rb</td><td align="left">打开一个已有的二进制文件，允许读取文件。</td></tr><tr><td align="left">wb</td><td align="left">打开一个二进制文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td align="left">ab</td><td align="left">打开一个二进制文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td align="left">rb+</td><td align="left">打开一个二进制文件，允许读写文件。</td></tr><tr><td align="left">wb+</td><td align="left">打开一个二进制文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td align="left">ab+</td><td align="left">打开一个二进制文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>Example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp = fopen(<span class="string">&quot;/tmp/test.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="fclose-关闭文件"><a href="#fclose-关闭文件" class="headerlink" title="fclose() 关闭文件"></a>fclose() 关闭文件</h2><p>该函数用于关闭一个文件，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">( FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>该函数接收一个FILE类型指针变量，将会关闭这个FILE类型指针变量指向的文件，并且返回一个int类型的值。</p><p>其中</p><p><code>fp</code>为一个指向所要关闭文件的FILE类型指针；</p><p>如果成功关闭文件，<code>fclose( )</code> 函数返回零，如果关闭文件时发生错误，函数返回 <code>EOF</code>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。<code>EOF</code> 是一个定义在头文件 <code>stdio.h</code> 中的常量。</p><p>Example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure><h2 id="fputc-将字符写入文件"><a href="#fputc-将字符写入文件" class="headerlink" title="fputc() 将字符写入文件"></a>fputc() 将字符写入文件</h2><p>该函数用于将字符输出/写入到文件中，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">( <span class="type">int</span> c, FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>该函数接收一个int类型参数<code>c</code>和一个FILE类型指针<code>fp</code>，会将ASCII码为<code>c</code>的单个字符写入到<code>fp</code>指针所指向的文件中。如果写入成功，位置指针会自动后移一个字节的位置，并且返回<code>c</code>作为函数的返回值。如果写入失败，则返回<code>EOF</code>。</p><p>其中，</p><p><code>c</code>为要写入字符的ASCII码；</p><p><code>fp</code>为指向要写入文件的FILE类型指针。</p><p>Example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fputc(<span class="number">48</span>,fp);</span><br></pre></td></tr></table></figure><h2 id="fputs-将字符串写入文件"><a href="#fputs-将字符串写入文件" class="headerlink" title="fputs() 将字符串写入文件"></a>fputs() 将字符串写入文件</h2><p>该函数用于将字符串输出/写入到文件中，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *s, FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>该函数接收一个char类型指针变量<code>s</code>和一个FILE类型指针变量fp，可以将指针s指向的字符串写入到fp所指向的文件中，如果写入成功，位置指针自动后移相应字节数，并且返回一个非负整数；否则，返回<code>EOF</code>。</p><p><strong>注意：</strong>指针s指向的字符串需以<code>\0</code>结束，但写入字符串时不会写入<code>\0</code>。</p><p>其中，</p><p><code>s</code>为char类型指针变量，指向要写入的字符串的首地址；</p><p><code>fp</code>为FILE类型指针变量，指向要写入的文件。</p><p>Example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;hello&quot;</span>,fp);</span><br></pre></td></tr></table></figure><h2 id="fprintf-格式化写入"><a href="#fprintf-格式化写入" class="headerlink" title="fprintf() 格式化写入"></a>fprintf() 格式化写入</h2><p>该函数用于格式化写入文件，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><p>基本用法与<code>printf()</code>函数类似，接收若干个参数，第一个参数为文件指针，剩余参数与<code>printf()</code>函数类似，如果写入成功，则返回写入的字符总数，否则返回一个负数。</p><p>其中，</p><p><code>stream</code>为指向输出文件的FILE类型指针。当该参数为<code>stdout</code>时该函数功能与<code>printf()</code>函数相同。</p><p><code>format</code>是 C 字符串，包含了要被写入到流 stream 中的文本。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。format 标签属性是 <code>%[flags][width][.precision][length]specifier</code>，具体讲解如下：</p><table><thead><tr><th align="left">specifier（说明符）</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">字符</td></tr><tr><td align="left">d 或 i</td><td align="left">有符号十进制整数</td></tr><tr><td align="left">e</td><td align="left">使用 e 字符的科学科学记数法（尾数和指数）</td></tr><tr><td align="left">E</td><td align="left">使用 E 字符的科学科学记数法（尾数和指数）</td></tr><tr><td align="left">f</td><td align="left">十进制浮点数</td></tr><tr><td align="left">g</td><td align="left">自动选择 %e 或 %f 中合适的表示法</td></tr><tr><td align="left">G</td><td align="left">自动选择 %E 或 %f 中合适的表示法</td></tr><tr><td align="left">o</td><td align="left">有符号八进制</td></tr><tr><td align="left">s</td><td align="left">字符的字符串</td></tr><tr><td align="left">u</td><td align="left">无符号十进制整数</td></tr><tr><td align="left">x</td><td align="left">无符号十六进制整数</td></tr><tr><td align="left">X</td><td align="left">无符号十六进制整数（大写字母）</td></tr><tr><td align="left">p</td><td align="left">指针地址</td></tr><tr><td align="left">n</td><td align="left">无输出</td></tr><tr><td align="left">%</td><td align="left">字符</td></tr></tbody></table><table><thead><tr><th align="left">flags（标识）</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">在给定的字段宽度内左对齐，默认是右对齐（参见 width 子说明符）。</td></tr><tr><td align="left">+</td><td align="left">强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。</td></tr><tr><td align="left">(space)</td><td align="left">如果没有写入任何符号，则在该值前面插入一个空格。</td></tr><tr><td align="left">#</td><td align="left">与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。 与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。 与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。</td></tr><tr><td align="left">0</td><td align="left">在指定填充 padding 的数字左边放置零（0），而不是空格（参见 width 子说明符）。</td></tr></tbody></table><table><thead><tr><th align="left">width（宽度）</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">(number)</td><td align="left">要输出的字符的最小数目。如果输出的值短于该数，结果会用空格填充。如果输出的值长于该数，结果不会被截断。</td></tr><tr><td align="left">*</td><td align="left">宽度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td></tr></tbody></table><table><thead><tr><th align="left">.precision（精度）</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.number</td><td align="left">对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。 对于 e、E 和 f 说明符：要在小数点后输出的小数位数。 对于 g 和 G 说明符：要输出的最大有效位数。 对于 s: 要输出的最大字符数。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。 对于 c 类型：没有任何影响。 当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。</td></tr><tr><td align="left">.*</td><td align="left">精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td></tr></tbody></table><table><thead><tr><th align="left">length（长度）</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">h</td><td align="left">参数被解释为短整型或无符号短整型（仅适用于整数说明符：i、d、o、u、x 和 X）。</td></tr><tr><td align="left">l</td><td align="left">参数被解释为长整型或无符号长整型，适用于整数说明符（i、d、o、u、x 和 X）及说明符 c（表示一个宽字符）和 s（表示宽字符字符串）。</td></tr><tr><td align="left">L</td><td align="left">参数被解释为长双精度型（仅适用于浮点数说明符：e、E、f、g 和 G）。</td></tr></tbody></table><h2 id="fgetc-从文件中读取字符"><a href="#fgetc-从文件中读取字符" class="headerlink" title="fgetc() 从文件中读取字符"></a>fgetc() 从文件中读取字符</h2><p>该函数用于从文件中读取一个字符，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">( FILE * fp )</span>;</span><br></pre></td></tr></table></figure><p>该函数接收一个指向所要读取的文件的FILE类型指针，函数从<code>fp</code>所指向的输入文件中读取一个字符。如果读取成功，返回值是所读取的字符的ASCII码值，并且位置指针向后移动一个字节；如果发生错误则返回 EOF。</p><p>Example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch=fgetc(fp);</span><br></pre></td></tr></table></figure><h2 id="fgets-从文件中读取字符串"><a href="#fgets-从文件中读取字符串" class="headerlink" title="fgets() 从文件中读取字符串"></a>fgets() 从文件中读取字符串</h2><p>该函数用于从文件中读取一个字符串，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">( <span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp )</span>;</span><br></pre></td></tr></table></figure><p>该函数接收一个char类型指针<code>buf</code>，一个int类型变量<code>n</code>，一个FILE类型指针<code>fp</code>。</p><p>函数从<code>fp</code>所指向的文件中读取 n - 1 个字符。它会把读取的字符串复制到<code>buf</code>所指向的字符串，并在最后追加一个<code>NULL</code>字符来终止字符串。如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。读取成功后位置指针自动向后移动 n - 1 个字节位置。</p><p>函数返回值为char类型指针<code>buf</code>。</p><p>其中，</p><p><code>buf</code>为cahr类型指针变量，指向将要储存字符串的首地址；</p><p><code>n</code>为int类型变量，表示要读取字符串长度(包括<code>\0</code>)；</p><p><code>fp</code>为FILE类型指针变量，指向要读取的文件。</p><h2 id="fscanf-格式化读取"><a href="#fscanf-格式化读取" class="headerlink" title="fscanf() 格式化读取"></a>fscanf() 格式化读取</h2><p>该函数用于格式化读取文件，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><p>基本用法与<code>scanf()</code>函数类似，接收若干个参数，第一个参数为文件指针，剩余参数与<code>scacnf()</code>函数类似，如果读取成功，该函数返回成功匹配和赋值的个数。如果到达文件末尾或发生读错误，则返回 EOF。</p><p>其中，</p><p><code>stream</code>为指向输出文件的FILE类型指针。当该参数为<code>stdin</code>时该函数功能与<code>printf()</code>函数相同。</p><p><code>format</code>是 C 字符串，包含了以下各项中的一个或多个：<em>空格字符、非空格字符</em> 和 <em>format 说明符</em>。<br>format 说明符形式为 <code>[=%[*][width][modifiers]type=]</code>，具体讲解如下：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">这是一个可选的星号，表示数据是从流 stream 中读取的，但是可以被忽视，即它不存储在对应的参数中。</td></tr><tr><td align="left">width</td><td align="left">这指定了在当前读取操作中读取的最大字符数。</td></tr><tr><td align="left">modifiers</td><td align="left">为对应的附加参数所指向的数据指定一个不同于整型（针对 d、i 和 n）、无符号整型（针对 o、u 和 x）或浮点型（针对 e、f 和 g）的大小： h ：短整型（针对 d、i 和 n），或无符号短整型（针对 o、u 和 x） l ：长整型（针对 d、i 和 n），或无符号长整型（针对 o、u 和 x），或双精度型（针对 e、f 和 g） L ：长双精度型（针对 e、f 和 g）</td></tr><tr><td align="left">type</td><td align="left">一个字符，指定了要被读取的数据类型以及数据读取方式。具体参见下一个表格。</td></tr></tbody></table><table><thead><tr><th align="left">类型说明符</th><th align="left">合格的输入</th><th align="left">参数的类型</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">单个字符：读取下一个字符。如果指定了一个不为 1 的宽度 width，函数会读取 width 个字符，并通过参数传递，把它们存储在数组中连续位置。在末尾不会追加空字符。</td><td align="left">char *</td></tr><tr><td align="left">d</td><td align="left">十进制整数：数字前面的 + 或 - 号是可选的。</td><td align="left">int *</td></tr><tr><td align="left">e,E,f,g,G</td><td align="left">浮点数：包含了一个小数点、一个可选的前置符号 + 或 -、一个可选的后置字符 e 或 E，以及一个十进制数字。两个有效的实例 -732.103 和 7.12e4</td><td align="left">float *</td></tr><tr><td align="left">o</td><td align="left">八进制整数。</td><td align="left">int *</td></tr><tr><td align="left">s</td><td align="left">字符串。这将读取连续字符，直到遇到一个空格字符（空格字符可以是空白、换行和制表符）。</td><td align="left">char *</td></tr><tr><td align="left">u</td><td align="left">无符号的十进制整数。</td><td align="left">unsigned int *</td></tr><tr><td align="left">x,X</td><td align="left">十六进制整数。</td><td align="left">int *</td></tr></tbody></table><h2 id="fwrite-二进制写入"><a href="#fwrite-二进制写入" class="headerlink" title="fwrite() 二进制写入"></a>fwrite() 二进制写入</h2><p>该函数用于将指定位置开始的指定字节数的内容写入到文件中，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> n, FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p>（size_t 是在 stdio.h 和 stdlib.h 头文件中使用 typedef 定义的数据类型，表示无符号整数，也即非负数，常用来表示数量。）</p><p>该函数接受4个参数，用于从内存的<code>ptr</code>地址开始，将连续<code>n*size</code>个字节的内容原样复制到<code>fp</code>所指向的文件中。并返回实际写入的数据块个数。</p><p>其中，</p><p><code>ptr</code>为无类型指针变量，表示要输出数据在内存中的首地址；</p><p><code>size</code>为一个数据块的字节数；</p><p><code>n</code>为数据块的个数；</p><p><code>fp</code>为FILE类型的指针，指向要写入的文件。</p><p>Example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">   FILE *fp;</span><br><span class="line">   <span class="type">char</span> str[] = <span class="string">&quot;Lakphy YES!&quot;</span>;</span><br><span class="line">   fp = fopen( <span class="string">&quot;file.txt&quot;</span> , <span class="string">&quot;w&quot;</span> );</span><br><span class="line">   fwrite(str, <span class="keyword">sizeof</span>(str) , <span class="number">1</span>, fp );</span><br><span class="line">   fclose(fp);</span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fread-二进制读取"><a href="#fread-二进制读取" class="headerlink" title="fread() 二进制读取"></a>fread() 二进制读取</h2><p>该函数用于读取文件中从当前位置开始的指定字节数内容，然后直接存储到内存中指定起始地址的内存空间中。其函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> n, FILE *fp)</span></span><br></pre></td></tr></table></figure><p>该函数接受四个参数，从<code>fp</code>打开的文件的当前位置开始，连续读取<code>n*size</code>个字节的内容，存储到<code>ptr</code>为首地址的内存中，返回值为实际读取到内存中的数据块个数。</p><p>其中，</p><p><code>ptr</code>为无类型指针，表示要输入数据在内存中的首地址；</p><p><code>size</code>表示一个数据块的字节数；</p><p><code>n</code>为数据块的个数；</p><p><code>fp</code>为FILE类型的指针，指向要读取的文件。</p><p>Example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp;</span><br><span class="line">   <span class="type">char</span> c[] = <span class="string">&quot;Lakphy YES!&quot;</span>;</span><br><span class="line">   <span class="type">char</span> buffer[<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 打开文件用于读写 */</span></span><br><span class="line">   fp = fopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 写入数据到文件 */</span></span><br><span class="line">   fwrite(c, <span class="built_in">strlen</span>(c) + <span class="number">1</span>, <span class="number">1</span>, fp);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 查找文件的开头 */</span></span><br><span class="line">   fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 读取并显示数据 */</span></span><br><span class="line">   fread(buffer, <span class="built_in">strlen</span>(c)+<span class="number">1</span>, <span class="number">1</span>, fp);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buffer);</span><br><span class="line">   fclose(fp);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rewind-位置指针指向文件头"><a href="#rewind-位置指针指向文件头" class="headerlink" title="rewind() 位置指针指向文件头"></a>rewind() 位置指针指向文件头</h2><p>该函数可以使位置指针指向文件头，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rewind</span><span class="params">(FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p>使<code>fp</code>指针指向的文件的位置指针指向文件头，同时清除和文件流相关的错误和EOF标记，无返回值。</p><h2 id="fseek-改变文件位置指针"><a href="#fseek-改变文件位置指针" class="headerlink" title="fseek() 改变文件位置指针"></a>fseek() 改变文件位置指针</h2><p>该函数可以改变位置指针，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *fp, <span class="type">long</span> <span class="type">int</span> offset, <span class="type">int</span> from)</span>;</span><br></pre></td></tr></table></figure><p>该函数可以将文件位置从<code>from</code>开始移动<code>offset</code>个字节。执行成功返回<code>0</code>，不成功返回非零值。</p><p>其中，</p><p><code>fp</code>为文件指针；</p><p><code>offset</code>为移动的字节数，当其为正数时表示向末尾移动，负数表示向前移动，且必须为长整形数；</p><p><code>from</code>为起始位置，他的取值如下：</p><table><thead><tr><th align="left">常量</th><th>等效数字</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SEEK_SET</td><td>0</td><td align="left">文件的开头</td></tr><tr><td align="left">SEEK_CUR</td><td>1</td><td align="left">文件指针的当前位置</td></tr><tr><td align="left">SEEK_END</td><td>2</td><td align="left">文件的末尾</td></tr></tbody></table><p>Example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   FILE *fp;</span><br><span class="line">   fp = fopen(<span class="string">&quot;file.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot;Lakphy YES!&quot;</span>, fp);</span><br><span class="line">   fseek( fp, <span class="number">7</span>, SEEK_SET );</span><br><span class="line">   <span class="built_in">fputs</span>(<span class="string">&quot; C Programming Langauge&quot;</span>, fp);</span><br><span class="line">   fclose(fp);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ftell-获取文件位置指针相对于文件头的位置"><a href="#ftell-获取文件位置指针相对于文件头的位置" class="headerlink" title="ftell() 获取文件位置指针相对于文件头的位置"></a>ftell() 获取文件位置指针相对于文件头的位置</h2><p>该函数用于获取文件位置指针相对于文件头的位置，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">int</span> <span class="title function_">ftell</span><span class="params">(FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p><code>fp</code>为文件指针，返回位置指针相对于文件头的偏移字节数，如果出错则返回<code>-1L</code>。</p><h2 id="fflush-刷新流-stream-的输出缓冲区"><a href="#fflush-刷新流-stream-的输出缓冲区" class="headerlink" title="fflush() 刷新流 stream 的输出缓冲区"></a>fflush() 刷新流 stream 的输出缓冲区</h2><p>通俗讲就是更新对文件的修改，其函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fflush</span><span class="params">(FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p><code>fp</code>为文件指针。如果成功，该函数返回零值。如果发生错误，则返回 EOF，且设置错误标识符（即 feof）。</p><h2 id="feof-测试给定流-stream-的文件结束标识符"><a href="#feof-测试给定流-stream-的文件结束标识符" class="headerlink" title="feof() 测试给定流 stream 的文件结束标识符"></a>feof() 测试给定流 stream 的文件结束标识符</h2><p>该函数用于检测文件的位置指针是否到达文件末尾，其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">feof</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><p><code>fp</code>为文件指针。到达文件末尾时返回非零值，否则返回0。</p><h2 id="freopen"><a href="#freopen" class="headerlink" title="freopen()"></a>freopen()</h2><p>该函数用于把一个新的文件名 filename 与给定的打开的流 stream 关联，同时关闭流中的旧文件。通常用于将输入输出重定向到文件。其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">freopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode, FILE *stream)</span>;</span><br></pre></td></tr></table></figure><p><code>filename</code>字符串包含了要打开文件的名称；</p><p><code>stream</code>是指向 FILE 对象的指针，该 FILE 对象标识了要被重新打开的流。当其为<code>stdout</code>时为将输出重定向到文件，当其为<code>stdin</code>时为重定向输入到文件。</p><p><code>mode</code>为字符串，表示文件访问模式，与<code>fopen</code>用法一样。</p><p>返回值：如果文件成功打开，则函数返回一个指针，指向用于标识流的对象。否则，返回空指针。</p><p>Example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fp = freopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>, <span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure><h2 id="remove-删除文件"><a href="#remove-删除文件" class="headerlink" title="remove() 删除文件"></a>remove() 删除文件</h2><p>该函数用于删除给定的文件名 <code>filename</code>，以便它不再被访问。其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span>;</span><br></pre></td></tr></table></figure><p><code>filename</code>表示文件地址，数据类型为字符串，允许使用相对地址或绝对地址。例如在Windows系统下<code>&quot;D:\\data\\file.txt&quot;</code>可以用来表示地址，在Linux系统下<code>&quot;/mnt/test.txt&quot;</code>可以用来表示地址.</p><p>如果成功，则返回零。如果错误，则返回 -1，并设置 errno。</p><h2 id="rename-重命名-移动文件"><a href="#rename-重命名-移动文件" class="headerlink" title="rename() 重命名/移动文件"></a>rename() 重命名/移动文件</h2><p>该函数用于把 <code>old_filename</code> 所指向的文件名改为 <code>new_filename</code>。可以实现文件重命名/移动。其原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rename</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *old_filename, <span class="type">const</span> <span class="type">char</span> *new_filename)</span>;</span><br></pre></td></tr></table></figure><p>其中，</p><p><code>old_filename</code>为要重命名的文件名；</p><p><code>new_filename</code>为新的文件名。</p><p>如果成功，则返回零。如果错误，则返回 -1，并设置 errno。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每个编程语言学到文件操作、字符串操作、网络连接什么什么的就开始有各种各样的库函数需要记忆，有的比较常用还比较好记，有的遇到了却没记住，那就只能请教Google了。但考试时候不能Google，本篇旨在总结C语言中常见的文件处理操作，便于查阅和记忆。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="C语言" scheme="https://lakphy.github.io/blog/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>在stm32单片机上使用printf</title>
    <link href="https://lakphy.github.io/blog/2020/11/19/%E5%9C%A8stm32%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8A%E4%BD%BF%E7%94%A8printf/"/>
    <id>https://lakphy.github.io/blog/2020/11/19/%E5%9C%A8stm32%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8A%E4%BD%BF%E7%94%A8printf/</id>
    <published>2020-11-18T23:59:09.000Z</published>
    <updated>2022-07-19T12:11:59.396Z</updated>
    
    <content type="html"><![CDATA[<p>对于C语言的初学者来说，最熟悉的大概是printf输出函数了，STM32单片机一般使用C语言编程，那么如何在STM32单片机中使用printf呢</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>这里使用STM32F401CCUx作为演示</p><p>jlink——用于烧录单片机以及串口通信测试</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>STM32CubeMX</p><p>Keil</p><p>（基于HAL库进行开发）</p><p>串口调试助手</p><h3 id="关于串口调试助手"><a href="#关于串口调试助手" class="headerlink" title="关于串口调试助手"></a>关于串口调试助手</h3><p>串口调试助手建议下载微软应用商店里的，名字就是叫串口调试助手</p><p><img src="./image-20201119081033946.png" alt="image-20201119081033946"></p><p>图标就是这个样子</p><h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><ul><li><p>为什么我的微软应用商店打不开？</p></li><li><p>因为种种我也不知道什么原因，微软的服务器在部分网咯下访问速度十分缓慢（装vs2019的小盆友应该能够感受到，所以建议使用手机热点开流量下载，这样会快一些</p></li></ul><h1 id="开始抄代码配置您的printf函数"><a href="#开始抄代码配置您的printf函数" class="headerlink" title="开始抄代码配置您的printf函数"></a>开始<del>抄代码</del>配置您的printf函数</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>在stm32单片机中，printf函数是无法打印到控制台的。为了让这个函数能实现打印功能，我们必须要把这个函数重定向，让它重定向到串口中，把要输出的内容打印到串口中。为此需要以下几步。</p><h2 id="新建一个工程"><a href="#新建一个工程" class="headerlink" title="新建一个工程"></a>新建一个工程</h2><p>（老玩家请跳过）</p><p>首先打开STM32CubeMX</p><p><img src="./image-20201119081658850.png" alt="image-20201119081658850"></p><p>点击画圈部分新建一个工程</p><p><img src="./image-20201119081804461.png" alt="image-20201119081804461"></p><p>选择我们要用的开发板STM32F401CCUx</p><p><img src="./image-20201119082114912.png" alt="image-20201119082114912"></p><p>之后开始配置时钟</p><p>先打开高速陶瓷晶振</p><p><img src="./image-20201119083719006.png" alt="image-20201119083719006"></p><p>找到上方的Clock Configuration</p><p>配置时钟，配置成果如图</p><p><img src="./image-20201119083907695.png" alt="image-20201119083907695"></p><h2 id="配置串口"><a href="#配置串口" class="headerlink" title="配置串口"></a>配置串口</h2><p>打开它的1号串口（请确保您的PA9和PA10引脚未被占用，后面会作说明）</p><p><img src="./image-20201119082402308.png" alt="image-20201119082402308"></p><p>之后您会在右边的芯片示意图上看到串口1的引脚被占用，表示串口1已开启</p><p><img src="./image-20201119082612484.png" alt="image-20201119082612484"></p><p>即可知PA9和PA10为串口1的引脚，PA9为TX，PA10为RX，请记住这个引脚名，之后需要使用</p><p>可以在界面的中间下部看到串口1的控制台</p><p><img src="./image-20201119082859857.png" alt="image-20201119082859857"></p><p>这里对控制台的一些基本设置做出解释，之后做串口通信时您需要对这些数据进行统一，否则会有非常鬼畜的现象（</p><table><thead><tr><th>名称</th><th>用途</th></tr></thead><tbody><tr><td>Baud Rate</td><td>波特率，一般都为115200，有时也有用9600</td></tr><tr><td>Word Length</td><td>数据位，一般为8</td></tr><tr><td>Parity</td><td>校验位，一般为None</td></tr><tr><td>Stop Bits</td><td>停止位，一般为1，有的地方称为One</td></tr></tbody></table><p>我们这里全部使用默认参数配置</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>完成以上配置之后</p><p>进入上方标签的project manager</p><p>设置project name和project location</p><p>之后找到这个东西</p><p><img src="./image-20201119084245670.png" alt="image-20201119084245670"></p><p>改成<img src="./image-20201119084301138.png" alt="image-20201119084301138"></p><p>点击右上角GENERATE CODE</p><p><img src="./image-20201119084050798.png" alt="image-20201119084050798"></p><p>完成之后点击open project，在keil中打开项目</p><p>打开main.c，在这个绿色位置</p><p><img src="./image-20201119101532465.png" alt="image-20201119101532465"></p><p>准备插入代码，这里说明一下，在使用CubeMX做开发时，我们的代码要写在注释USER CODE BEGIN和USER CODE END位置，防止下次更新代被覆盖</p><p>我们继续下一步操作，在上面说的位置插入代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUTCHAR_PROTOTYPE int __io_putchar(int ch)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">PUTCHAR_PROTOTYPE</span><br><span class="line">&#123;</span><br><span class="line">    HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span> , <span class="number">0xffff</span>);</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码将printf重定向到串口输出</p><p>至此，<del>教程结束</del></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>在main.c的主函数main()里面有一段这样的代码</p><p><img src="./image-20201119085407904.png" alt="image-20201119085407904"></p><p>我们在USER CODE END WHILE之前写我们的测试代码</p><p>举个栗子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Lakphy&quot;</span>);</span><br><span class="line">HAL_Delay(<span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>这里的HAL_Delay是加一个延迟，防止串口通信频率太高卡死</p><p>就是酱紫</p><p><img src="./image-20201119101703801.png" alt="image-20201119101703801"></p><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>这里给出jlink接线方式</p><p>下面是烧写程序用的</p><table><thead><tr><th>jlink</th><th>stm32</th></tr></thead><tbody><tr><td>GND</td><td>GND</td></tr><tr><td>3.3V</td><td>3V3</td></tr><tr><td>CLK</td><td>SCK</td></tr><tr><td>SWO</td><td>DIO</td></tr></tbody></table><p>下面是串口通信用的</p><table><thead><tr><th>jlink</th><th>stm32</th><th>意义</th></tr></thead><tbody><tr><td>TXD</td><td>PA10</td><td>RX</td></tr><tr><td>RXD</td><td>PA9</td><td>TX</td></tr></tbody></table><p>亲测可以同时接在一起，没有任何问题</p><p>实物图</p><p><img src="./1605751787507.jpg" alt="1605751787507"></p><h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><p>先进行一些必要的设置</p><p><img src="./image-20201119102121174.png" alt="image-20201119102121174"></p><p>这一排东西</p><p>找到</p><p><img src="./image-20201119102146596.png" alt="image-20201119102146596"></p><p>这个按钮</p><p>点击进入options</p><p><img src="./image-20201119102221026.png" alt="image-20201119102221026">这里，改一下</p><p>改成这样（本来是可选操作的，但后面有操作需要它，所以这里都改成6.14吧）</p><p><img src="./image-20201119102546026.png" alt="image-20201119102546026"></p><p>可以明显提升编译速度</p><p>看见这一排没有</p><p><img src="./image-20201119102626917.png" alt="image-20201119102626917"></p><p>点Debug，找到这里</p><p><img src="./image-20201119102648641.png" alt="image-20201119102648641"></p><p>改成我们的jlink</p><p><img src="./image-20201119102704659.png" alt="image-20201119102704659"></p><p>然后点下面的ok保存设置</p><p>看到左上角一排按键有没有</p><p><img src="./image-20201119101730251.png" alt="image-20201119101730251"></p><p>再放大</p><p><img src="./image-20201119101752181.png" alt="image-20201119101752181"></p><p>左数第二个是编译，第三个是全部编译，右数第一个是烧录</p><p>一般第一次打开项目或者你出现莫名其妙bug时候都要用全部编译，其他都是直接编译就行了。如果不怕费时间直接每次都全部编译也没有问题（</p><p>编译之后下面显示类似这样表示编译正常，没有错误</p><p><img src="./image-20201119102911942.png" alt="image-20201119102911942"></p><p>重点是这个</p><p><img src="./image-20201119102929897.png" alt="image-20201119102929897"></p><p><del>众所周知 Warnings都没啥用</del></p><p>然后点烧录</p><p><img src="./image-20201119103101164.png" alt="image-20201119103101164"></p><p>可能提示这个</p><p><img src="./image-20201119103224227.png" alt="image-20201119103224227"></p><p>不理会</p><p>​    然后看到下面这个</p><p><img src="./image-20201119103250347.png" alt="image-20201119103250347"></p><p>继续等待</p><p>出现这个</p><p><img src="./image-20201119103316615.png" alt="image-20201119103316615"></p><p>表明烧录成功</p><h2 id="观察实验现象"><a href="#观察实验现象" class="headerlink" title="观察实验现象"></a>观察实验现象</h2><p>不要断开jlink，打开串口调试助手</p><p>回忆我们之前在CubeMX做的配置</p><p><img src="./image-20201119082859857.png" alt="image-20201119082859857"></p><p>将其应用到串口调试助手</p><p><img src="./image-20201119113849949.png" alt="image-20201119113849949"></p><p>这样</p><p>发现我们的参数和串口调试助手默认的一样，所以本次实验可以直接打开串口，无需配置</p><p>点击打开串口，可以看到右侧输出我们的printf内容</p><p><img src="./image-20201119114159068.png" alt="image-20201119114159068"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>至此教程结束</p><p>有兴趣小盆友可以根据我之前的代码研究一下HAL库的串口通信函数，自己实现一个scanf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于C语言的初学者来说，最熟悉的大概是printf输出函数了，STM32单片机一般使用C语言编程，那么如何在STM32单片机中使用printf呢&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作</summary>
      
    
    
    
    
    <category term="STM32单片机" scheme="https://lakphy.github.io/blog/tags/STM32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>STM32外接DAC模块MCP4725</title>
    <link href="https://lakphy.github.io/blog/2020/10/31/STM32%E5%A4%96%E6%8E%A5DAC%E6%A8%A1%E5%9D%97MCP4725/"/>
    <id>https://lakphy.github.io/blog/2020/10/31/STM32%E5%A4%96%E6%8E%A5DAC%E6%A8%A1%E5%9D%97MCP4725/</id>
    <published>2020-10-31T11:11:45.000Z</published>
    <updated>2022-07-19T12:11:59.188Z</updated>
    
    <content type="html"><![CDATA[<p>我最近在使用STM32F411CEU最小系统板做开发，但发现它并不自带DAC数模转换模块，所以我选择外接DAC模块MCP4725</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><h4 id="STM32系列开发板"><a href="#STM32系列开发板" class="headerlink" title="STM32系列开发板"></a>STM32系列开发板</h4><p>我这里对MCP4725的使用方法理论上都是通用的，所以对芯片的要求并不严格。<br>我使用STM32F411CEU<br>它拥有最高100MHz的主频，<a href="https://www.st.com/resource/en/reference_manual/dm00119316-stm32f411xc-e-advanced-arm-based-32-bit-mcus-stmicroelectronics.pdf">官方文档</a><br><img src="1.jpg" alt="STM32F411CEU"></p><h3 id="MCP4725数模转换模块"><a href="#MCP4725数模转换模块" class="headerlink" title="MCP4725数模转换模块"></a>MCP4725数模转换模块</h3><p>MCP4725价格低廉，使用I2C接口（拉了拉了）<br><a href="http://ww1.microchip.com/downloads/en/devicedoc/22039d.pdf">官方文档</a><br><img src="2.jpg" alt="MCP4725 Breakout"></p><h3 id="面包板杜邦线若干"><a href="#面包板杜邦线若干" class="headerlink" title="面包板杜邦线若干"></a>面包板杜邦线若干</h3><p>众所周知，杜邦线是会自己消失的</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在cubemx中打开I2C接口<br>在项目文件夹内<code>/Core/lnc/</code>内建立文件<code>MCP4725.h</code>，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MCP4725 Driver</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> INC_MCP4725_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INC_MCP4725_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f4xx_hal.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MCP4725_ADDRESS     0xc0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MCP4725_READ        0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MCP4725_DAC         0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MCP4725_DAC_EEPROM  0x60</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MCP4725_Out</span><span class="params">(I2C_HandleTypeDef *hi2c,<span class="type">uint16_t</span> outputValue,<span class="type">uint8_t</span> writeMode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* INC_MCP4725_H_ */</span></span></span><br></pre></td></tr></table></figure><p>这里需要注意一下，根据官方文档，为了使一块板子上可以使用更多个MCP4725，MCP4725的A0引脚可以选择上拉或者下拉，当下拉时，MCP4725的地址为0x60，上拉时为0x61，不拉时默认下拉。我这里使用默认下拉0x60地址，抄代码时请按需修改。<br>在项目文件夹内<code>/Core/Src/</code>内建立文件<code>MCP4725.c</code>，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MCP4725 Driver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MCP4725.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MCP4725_Out</span><span class="params">(I2C_HandleTypeDef *hi2c,<span class="type">uint16_t</span> outputValue,<span class="type">uint8_t</span> writeMode)</span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> buffer[<span class="number">3</span>]=&#123;<span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="type">uint32_t</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(writeMode==<span class="number">1</span>)&#123;</span><br><span class="line">        buffer[<span class="number">0</span>]=MCP4725_DAC_EEPROM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        buffer[<span class="number">0</span>]=MCP4725_DAC;</span><br><span class="line">    &#125;</span><br><span class="line">outputValue=outputValue * <span class="number">4096</span> / <span class="number">3300.0f</span>;<span class="comment">//3300表示标准电压3.3v，按需修改</span></span><br><span class="line">    buffer[<span class="number">1</span>]=(outputValue/<span class="number">16</span>);</span><br><span class="line">    buffer[<span class="number">2</span>]=(outputValue%<span class="number">16</span>)&lt;&lt;<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    flag=HAL_I2C_Master_Transmit(hi2c,MCP4725_ADDRESS,buffer,<span class="number">3</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    HAL_Delay(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一步在主函数中做出修改<br>加入头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MCP4725.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MCP4725.c&quot;</span></span></span><br></pre></td></tr></table></figure><p>调用实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MCP4725_Out(&amp;hi2c1,<span class="number">2000</span>,<span class="number">1</span>)<span class="comment">//在i2c1接口的MCP4725上输出2000mv电压</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这款MCP4725模块价格实惠，但i2c接口实在拉跨。以上教程实现了傻瓜式调用，总结一句就是</p><blockquote><p>有手就行</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我最近在使用STM32F411CEU最小系统板做开发，但发现它并不自带DAC数模转换模块，所以我选择外接DAC模块MCP4725&lt;/p&gt;
&lt;h2 id=&quot;准备材料&quot;&gt;&lt;a href=&quot;#准备材料&quot; class=&quot;headerlink&quot; title=&quot;准备材料&quot;&gt;&lt;/a&gt;准备</summary>
      
    
    
    
    
    <category term="STM32单片机" scheme="https://lakphy.github.io/blog/tags/STM32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>OI心(wu)得(dao)</title>
    <link href="https://lakphy.github.io/blog/2020/10/06/oi%E5%BF%83%E5%BE%97/"/>
    <id>https://lakphy.github.io/blog/2020/10/06/oi%E5%BF%83%E5%BE%97/</id>
    <published>2020-10-06T05:02:07.000Z</published>
    <updated>2022-07-19T12:11:59.261Z</updated>
    
    <content type="html"><![CDATA[<p>还有几天就是2020年NOIp初赛了，想起来我都快有两年没打OI了，这里分享一点小小的oi心(wu)得(dao)</p><hr><p>模拟只会猜题意,贪心只能过样例; 数学上来先打表,</p><p>DP一般看规律. 组合数学靠运气,计算几何瞎暴力;</p><p>图论强行套模板,数论只会GCD.</p><p>递归递推伤不起,搜索茫然TLE;</p><p>分治做得像枚举,暴力枚举数第一.</p><p>数据结构干瞪眼,怒刷水题找信心;</p><p>涨姿势也不容易,考试一来全懵逼!</p><hr><p>AC: Answer Correct 正确的答案</p><p>CE:Compile Easily 轻松地通过编译</p><p>PC: Pass Compile 通过编译</p><p>WA:Wonerful Answer 极好的答案</p><p>RE:Right Enough 过于正确</p><p>TLE: Time Limit Enough 时间充裕</p><p>MLE: Memory Limit Enough 内存充裕</p><p>OLE: Output Limit Enough 输出充裕</p><p>UKE: Unknown Exactness 不明情况的正确</p><hr><p>骗分过样例， 暴力出奇迹。 数学先打表， ＤＰ看运气。</p><p>穷举ＴＬＥ， 递推ＵＫＥ。 模拟ＭＬＥ， 贪心还ＣＥ。</p><p>想要骗到分， 就要有方法。 图论背模板， 数论背公式。</p><p>动规背方程， 高精背代码。 如果都没背， 干脆输样例。</p><hr><p><img src="oi.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;还有几天就是2020年NOIp初赛了，想起来我都快有两年没打OI了，这里分享一点小小的oi心(wu)得(dao)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;模拟只会猜题意,贪心只能过样例; 数学上来先打表,&lt;/p&gt;
&lt;p&gt;DP一般看规律. 组合数学靠运气,计算几何瞎暴力;&lt;/p&gt;
&lt;p&gt;图论</summary>
      
    
    
    
    
    <category term="OI" scheme="https://lakphy.github.io/blog/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Arduino鬼畜电子琴制作</title>
    <link href="https://lakphy.github.io/blog/2020/10/04/Arduino%E9%AC%BC%E7%95%9C%E7%94%B5%E5%AD%90%E7%90%B4%E5%88%B6%E4%BD%9C/"/>
    <id>https://lakphy.github.io/blog/2020/10/04/Arduino%E9%AC%BC%E7%95%9C%E7%94%B5%E5%AD%90%E7%90%B4%E5%88%B6%E4%BD%9C/</id>
    <published>2020-10-04T15:37:43.000Z</published>
    <updated>2022-07-19T12:11:59.154Z</updated>
    
    <content type="html"><![CDATA[<p>由于某些原因，我又拿出了我的Arduino开发板，这次准备制作一个完整的电子琴。没有意外的话，这应该是我最后一次做Arduino了。</p><h1 id="正式开始前的准备"><a href="#正式开始前的准备" class="headerlink" title="正式开始前的准备"></a>正式开始前的准备</h1><h3 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h3><ol><li>能演奏基本音符</li><li>能演奏高低音</li><li>能通过显示设备输出当前音符</li><li>能够自动演奏</li></ol><h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h3><h4 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h4><p>这次仍然采用经典的 Arduino Uno 开发板，相关说明在我之前的博客中有提及，这里不做描述。</p><h4 id="发声设备"><a href="#发声设备" class="headerlink" title="发声设备"></a>发声设备</h4><p>为便于研究(lan)，这次采用的是无源蜂鸣器作为发声设备，同样，我在之前博客中有提及，这里不描述。</p><h4 id="显示设备"><a href="#显示设备" class="headerlink" title="显示设备"></a>显示设备</h4><p>我的显示设备采用LCD 1602，使用spi接口，可以大幅降低成本（但会占用大量GPIO）<br><img src="1.jpg" alt="LCD 1602"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li>杜邦线若干（众所周知，杜邦线是会自己消失的 /确信）</li><li>适量面包板</li><li>10个10k欧电阻（用于制作下拉电路）</li><li>11个按键</li></ol><h1 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h1><h3 id="绘制电路图"><a href="#绘制电路图" class="headerlink" title="绘制电路图"></a>绘制电路图</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>我使用<a href="https://fritzing.org/">fritzing</a>制作电路图</p><h4 id="LCD1602接线"><a href="#LCD1602接线" class="headerlink" title="LCD1602接线"></a>LCD1602接线</h4><p>为节约GPIO，我采用四线接法，为方便接线，我把六根线全挂在An GPIO上面，接线表如下</p><table><thead><tr><th align="right">LCD1602</th><th align="left">PIN</th></tr></thead><tbody><tr><td align="right">VSS</td><td align="left">GND</td></tr><tr><td align="right">VDD</td><td align="left">5V</td></tr><tr><td align="right">V0</td><td align="left">电位器中间引脚</td></tr><tr><td align="right">RS</td><td align="left">A0</td></tr><tr><td align="right">RW</td><td align="left">GND</td></tr><tr><td align="right">E</td><td align="left">A1</td></tr><tr><td align="right">D0</td><td align="left">/</td></tr><tr><td align="right">D1</td><td align="left">/</td></tr><tr><td align="right">D2</td><td align="left">/</td></tr><tr><td align="right">D3</td><td align="left">/</td></tr><tr><td align="right">D4</td><td align="left">A2</td></tr><tr><td align="right">D5</td><td align="left">A3</td></tr><tr><td align="right">D6</td><td align="left">A4</td></tr><tr><td align="right">D7</td><td align="left">A5</td></tr><tr><td align="right">A</td><td align="left">5V</td></tr><tr><td align="right">K</td><td align="left">GND</td></tr></tbody></table><h4 id="关于开关按键的电路"><a href="#关于开关按键的电路" class="headerlink" title="关于开关按键的电路"></a>关于开关按键的电路</h4><p>经过我的多次实践发现，若按键直接接INPUT接口，且开发板上接有无源蜂鸣器，会出现按键莫名改变状态的问题。<br>经过约一周的收集资料及咨询大佬，终于发现了问题。<br>问题关键是INPUT接口的高低电平不确定。目前存在两种解决方案：</p><ol><li>设置芯片INPUT接口内部上拉</li><li>在按键外部部分设置外部下拉电路</li></ol><h5 id="方案一-内部上拉"><a href="#方案一-内部上拉" class="headerlink" title="方案一 内部上拉"></a>方案一 内部上拉</h5><p>故名思意，内部上拉，就是在芯片内部将这个GPIO的电平调至高电平，先不管芯片内部是怎么实现的这一功能，对于我们来说，这个功能只需要一行代码就能解决，所以这是最简单的解决方案。<br>代码说明：<br>原来的INPUT接口初始化代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pinMode</span>(<span class="number">11</span>, INPUT);</span><br></pre></td></tr></table></figure><p>我们现在要将其改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pinMode</span>(<span class="number">11</span>, INPUT_PULLUP);</span><br></pre></td></tr></table></figure><p>即可实现内部上拉。<br>但因为我可能在某宝买到了假的Uno开发板，我没能实现内部上拉，所以我选择了外部下拉。</p><h5 id="方案二-外部下拉"><a href="#方案二-外部下拉" class="headerlink" title="方案二 外部下拉"></a>方案二 外部下拉</h5><p>既然是外部，电路自然不同，原本的开关电路将要改成下图样式<br><img src="2.jpg" alt="外部下拉电路简图"><br>以咱可怜的高中物理水平就不强行解释这个电路原理了（</p><h4 id="成果图"><a href="#成果图" class="headerlink" title="成果图"></a>成果图</h4><p><img src="3.jpg" alt="成果电路图"></p><h3 id="采购元件"><a href="#采购元件" class="headerlink" title="采购元件"></a>采购元件</h3><p>这里推荐淘宝上的优信电子</p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p>我需要先定义各个音符及其高低音的发声频率</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Do_l 262</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re_l 294</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mi_l 330</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa_l 349</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> so_l 392</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> la_l 440</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si_l 494</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Do 523</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re 587</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mi 659</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa 698</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> so 784</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> la 880</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si 932</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Do_h 1046</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re_h 1175</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mi_h 1318</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa_h 1397</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> so_h 1568</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> la_h 1760</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si_h 1976</span></span><br></pre></td></tr></table></figure><p>然后开始制作标准音及混音发声<br>目前我找到了一个很难受的土制混音方案，就是每隔一毫秒换一次音，缺点就是声音很沙哑，有点抖。<br>为实现无限叠加混音，我使用了如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="type">int</span> normalTones[<span class="number">8</span>] = &#123;&#125;;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//get button state</span></span><br><span class="line">  button0 = <span class="built_in">digitalRead</span>(<span class="number">2</span>);</span><br><span class="line">  button1 = <span class="built_in">digitalRead</span>(<span class="number">3</span>);</span><br><span class="line">  button2 = <span class="built_in">digitalRead</span>(<span class="number">4</span>);</span><br><span class="line">  button3 = <span class="built_in">digitalRead</span>(<span class="number">5</span>);</span><br><span class="line">  button4 = <span class="built_in">digitalRead</span>(<span class="number">6</span>);</span><br><span class="line">  button5 = <span class="built_in">digitalRead</span>(<span class="number">7</span>);</span><br><span class="line">  button6 = <span class="built_in">digitalRead</span>(<span class="number">8</span>);</span><br><span class="line">  button7 = <span class="built_in">digitalRead</span>(<span class="number">9</span>);</span><br><span class="line">  button8 = <span class="built_in">digitalRead</span>(<span class="number">10</span>);</span><br><span class="line">  button9 = <span class="built_in">digitalRead</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">if</span> (button0 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = Do;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (button1 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = re;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (button2 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = mi;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (button3 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = fa;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (button4 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = so;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (button5 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = la;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (button6 == HIGH) &#123;</span><br><span class="line">    normalTones[num] = si;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  normalTones[num] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//lcd print</span></span><br><span class="line">    lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    lcd.<span class="built_in">print</span>(<span class="string">&quot;Welcome!        &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == Do) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Do (C)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == re) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Re (D)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == mi) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Mi (E)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == fa) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Fa (F)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == so) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;So (G)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == la) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;La (A)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == si) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Si (B)          &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;MIX             &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (normalTones[i] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">tone</span>(<span class="number">13</span>, normalTones[i]);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里说明一下几个函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);<span class="comment">//设置打印字符光标位置为第二行第一个</span></span><br><span class="line">lcd.<span class="built_in">print</span>();<span class="comment">//打印括号内的字符</span></span><br><span class="line"><span class="built_in">delay</span>(<span class="number">1</span>);<span class="comment">//延时1ms</span></span><br><span class="line"><span class="built_in">tone</span>();<span class="comment">//发声函数，需要传递两个参数，一个参数为发声脚，一个为频率</span></span><br><span class="line"><span class="built_in">digitalRead</span>();<span class="comment">//获取按键状态，当被按下时为HIGH</span></span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;LiquidCrystal.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">This programme was produced by Lakphy.</span></span><br><span class="line"><span class="comment">It is prohibited to use these code for illegal purposes.</span></span><br><span class="line"><span class="comment">Welcome to visit the private site of Lakphy:</span></span><br><span class="line"><span class="comment">International channel: lakphy.me</span></span><br><span class="line"><span class="comment">        China channel: lakphy.gitee.io</span></span><br><span class="line"><span class="comment">                Email: lakphy@outlook.com</span></span><br><span class="line"><span class="comment">Thanks for the help of the seniors of SAST !</span></span><br><span class="line"><span class="comment">Thanks for open source ! </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Do_l 262</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re_l 294</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mi_l 330</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa_l 349</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> so_l 392</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> la_l 440</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si_l 494</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Do 523</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re 587</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mi 659</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa 698</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> so 784</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> la 880</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si 932</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Do_h 1046</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re_h 1175</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mi_h 1318</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa_h 1397</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> so_h 1568</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> la_h 1760</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si_h 1976</span></span><br><span class="line"><span class="comment">// vss   vcc   v0   rs   rw   e   db0   db1   db2   db3   db4   db5   db6   db7   led+   led-</span></span><br><span class="line"><span class="comment">//                  a0        a1  \     \     \     \     A2    A3    A4    A5</span></span><br><span class="line"><span class="type">int</span> button0 = LOW;</span><br><span class="line"><span class="type">int</span> button1 = LOW;</span><br><span class="line"><span class="type">int</span> button2 = LOW;</span><br><span class="line"><span class="type">int</span> button3 = LOW;</span><br><span class="line"><span class="type">int</span> button4 = LOW;</span><br><span class="line"><span class="type">int</span> button5 = LOW;</span><br><span class="line"><span class="type">int</span> button6 = LOW;</span><br><span class="line"><span class="type">int</span> button7 = LOW;</span><br><span class="line"><span class="type">int</span> button8 = LOW;</span><br><span class="line"><span class="type">int</span> button9 = LOW;</span><br><span class="line"><span class="function">LiquidCrystal <span class="title">lcd</span><span class="params">(A0, A1, A2, A3, A4, A5)</span></span>;</span><br><span class="line"><span class="type">int</span> music[] = &#123;</span><br><span class="line">  so_l, so_l, la_l, so_l, Do  , si_l,</span><br><span class="line">  so_l, so_l, la_l, so_l, re  , Do  ,</span><br><span class="line">  so_l, so_l, so  , mi  , Do  , si_l, so_l,</span><br><span class="line">  fa  , fa  , mi  , Do  , re  , Do</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> times[] = &#123;</span><br><span class="line">  <span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">800</span>,</span><br><span class="line">  <span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">800</span>,</span><br><span class="line">  <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>,</span><br><span class="line">  <span class="number">400</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">800</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// setup lcd</span></span><br><span class="line">  lcd.<span class="built_in">begin</span>(<span class="number">16</span>, <span class="number">2</span>);</span><br><span class="line">  lcd.<span class="built_in">print</span>(<span class="string">&quot;Lakphy Singer :)&quot;</span>);</span><br><span class="line">  lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  lcd.<span class="built_in">print</span>(<span class="string">&quot;Hello!          &quot;</span>);</span><br><span class="line">  <span class="comment">// setup keyboard</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">2</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">3</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">4</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">5</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">6</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">7</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">8</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">9</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">10</span>, INPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">11</span>, INPUT);</span><br><span class="line">  <span class="comment">//setup tones</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>, OUTPUT);</span><br><span class="line">  <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> canRun = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//get button state</span></span><br><span class="line">  button0 = <span class="built_in">digitalRead</span>(<span class="number">2</span>);</span><br><span class="line">  button1 = <span class="built_in">digitalRead</span>(<span class="number">3</span>);</span><br><span class="line">  button2 = <span class="built_in">digitalRead</span>(<span class="number">4</span>);</span><br><span class="line">  button3 = <span class="built_in">digitalRead</span>(<span class="number">5</span>);</span><br><span class="line">  button4 = <span class="built_in">digitalRead</span>(<span class="number">6</span>);</span><br><span class="line">  button5 = <span class="built_in">digitalRead</span>(<span class="number">7</span>);</span><br><span class="line">  button6 = <span class="built_in">digitalRead</span>(<span class="number">8</span>);</span><br><span class="line">  button7 = <span class="built_in">digitalRead</span>(<span class="number">9</span>);</span><br><span class="line">  button8 = <span class="built_in">digitalRead</span>(<span class="number">10</span>);</span><br><span class="line">  button9 = <span class="built_in">digitalRead</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//high</span></span><br><span class="line">  <span class="keyword">if</span> (button7 == HIGH) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (button0 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Do_h (C)        &quot;</span>);</span><br><span class="line">      <span class="comment">//sing</span></span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, Do_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">2</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//re</span></span><br><span class="line">    <span class="keyword">if</span> (button1 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Re_h (D)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, re_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">3</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//mi</span></span><br><span class="line">    <span class="keyword">if</span> (button2 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Mi_h (E)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, mi_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">4</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fa</span></span><br><span class="line">    <span class="keyword">if</span> (button3 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Fa_h (F)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, fa_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">5</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//so</span></span><br><span class="line">    <span class="keyword">if</span> (button4 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;So_h (G)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, so_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">6</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//la</span></span><br><span class="line">    <span class="keyword">if</span> (button5 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;La_h (A)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, la_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">7</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//si</span></span><br><span class="line">    <span class="keyword">if</span> (button6 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Si_h (B)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, si_h);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">8</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//low</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (button8 == HIGH) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (button0 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Do_l (C)        &quot;</span>);</span><br><span class="line">      <span class="comment">//sing</span></span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, Do_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">2</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//re</span></span><br><span class="line">    <span class="keyword">if</span> (button1 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Re_l (D)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, re_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">3</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//mi</span></span><br><span class="line">    <span class="keyword">if</span> (button2 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Mi_l (E)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, mi_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">4</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fa</span></span><br><span class="line">    <span class="keyword">if</span> (button3 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Fa_l (F)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, fa_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">5</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//so</span></span><br><span class="line">    <span class="keyword">if</span> (button4 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;So_l (G)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, so_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">6</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//la</span></span><br><span class="line">    <span class="keyword">if</span> (button5 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;La_l (A)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, la_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">7</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//si</span></span><br><span class="line">    <span class="keyword">if</span> (button6 == HIGH) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Si_l (B)        &quot;</span>);</span><br><span class="line">      <span class="built_in">tone</span>(<span class="number">13</span>, si_l);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">50</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">digitalRead</span>(<span class="number">8</span>) != HIGH) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (button9 == HIGH) &#123;</span><br><span class="line">    <span class="keyword">if</span> (canRun) &#123;</span><br><span class="line">      <span class="comment">//lcd print</span></span><br><span class="line">      lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      lcd.<span class="built_in">print</span>(<span class="string">&quot;Auto Singing....&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">25</span>; x++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (!canRun) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (music[x] == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">tone</span>(<span class="number">13</span>, music[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">delay</span>(times[x]);<span class="comment">//节拍延时</span></span><br><span class="line">        <span class="comment">//digitalWrite(ledpin,LOW);</span></span><br><span class="line">        <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      canRun = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//lcd print</span></span><br><span class="line">    lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    lcd.<span class="built_in">print</span>(<span class="string">&quot;Singing END !   &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//normal tone</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //Do</span></span><br><span class="line"><span class="comment">    else if (button0 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;Do (C)          &quot;);</span></span><br><span class="line"><span class="comment">    //sing</span></span><br><span class="line"><span class="comment">    tone(13, Do);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(2) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //re</span></span><br><span class="line"><span class="comment">    else if (button1 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;Re (D)          &quot;);</span></span><br><span class="line"><span class="comment">    tone(13, re);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(3) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //mi</span></span><br><span class="line"><span class="comment">    else if (button2 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;Mi (E)          &quot;);</span></span><br><span class="line"><span class="comment">    tone(13, mi);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(4) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //fa</span></span><br><span class="line"><span class="comment">    else if (button3 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;Fa (F)          &quot;);</span></span><br><span class="line"><span class="comment">    tone(13, fa);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(5) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //so</span></span><br><span class="line"><span class="comment">    else if (button4 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;So (G)          &quot;);</span></span><br><span class="line"><span class="comment">    tone(13, so);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(6) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //la</span></span><br><span class="line"><span class="comment">    else if (button5 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;La (A)          &quot;);</span></span><br><span class="line"><span class="comment">    tone(13, la);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(7) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //si</span></span><br><span class="line"><span class="comment">    else if (button6 == HIGH) &#123;</span></span><br><span class="line"><span class="comment">    //lcd print</span></span><br><span class="line"><span class="comment">    lcd.setCursor(0, 1);</span></span><br><span class="line"><span class="comment">    lcd.print(&quot;Si (B)          &quot;);</span></span><br><span class="line"><span class="comment">    tone(13, si);</span></span><br><span class="line"><span class="comment">    delay(50);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">      if (digitalRead(8) != HIGH) break;</span></span><br><span class="line"><span class="comment">      delay(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    noTone(13);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="type">int</span> normalTones[<span class="number">8</span>] = &#123;&#125;;</span><br><span class="line">      <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//get button state</span></span><br><span class="line">      button0 = <span class="built_in">digitalRead</span>(<span class="number">2</span>);</span><br><span class="line">      button1 = <span class="built_in">digitalRead</span>(<span class="number">3</span>);</span><br><span class="line">      button2 = <span class="built_in">digitalRead</span>(<span class="number">4</span>);</span><br><span class="line">      button3 = <span class="built_in">digitalRead</span>(<span class="number">5</span>);</span><br><span class="line">      button4 = <span class="built_in">digitalRead</span>(<span class="number">6</span>);</span><br><span class="line">      button5 = <span class="built_in">digitalRead</span>(<span class="number">7</span>);</span><br><span class="line">      button6 = <span class="built_in">digitalRead</span>(<span class="number">8</span>);</span><br><span class="line">      button7 = <span class="built_in">digitalRead</span>(<span class="number">9</span>);</span><br><span class="line">      button8 = <span class="built_in">digitalRead</span>(<span class="number">10</span>);</span><br><span class="line">      button9 = <span class="built_in">digitalRead</span>(<span class="number">11</span>);</span><br><span class="line">      <span class="keyword">if</span> (button0 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = Do;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (button1 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = re;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (button2 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = mi;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (button3 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = fa;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (button4 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = so;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (button5 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = la;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (button6 == HIGH) &#123;</span><br><span class="line">        normalTones[num] = si;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      normalTones[num] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//lcd print</span></span><br><span class="line">        lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        lcd.<span class="built_in">print</span>(<span class="string">&quot;Welcome!        &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == Do) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;Do (C)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == re) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;Re (D)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == mi) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;Mi (E)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == fa) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;Fa (F)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == so) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;So (G)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == la) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;La (A)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalTones[<span class="number">0</span>] == si) &#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;Si (B)          &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//lcd print</span></span><br><span class="line">          lcd.<span class="built_in">setCursor</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">          lcd.<span class="built_in">print</span>(<span class="string">&quot;MIX             &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (normalTones[i] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">tone</span>(<span class="number">13</span>, normalTones[i]);</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//delay</span></span><br><span class="line">  <span class="built_in">noTone</span>(<span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成品图"><a href="#成品图" class="headerlink" title="成品图"></a>成品图</h1><p><img src="singer.jpg" alt="成品图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于某些原因，我又拿出了我的Arduino开发板，这次准备制作一个完整的电子琴。没有意外的话，这应该是我最后一次做Arduino了。&lt;/p&gt;
&lt;h1 id=&quot;正式开始前的准备&quot;&gt;&lt;a href=&quot;#正式开始前的准备&quot; class=&quot;headerlink&quot; title=&quot;正式</summary>
      
    
    
    
    
    <category term="Arduino" scheme="https://lakphy.github.io/blog/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>联想 YOGA 14S 开箱评测</title>
    <link href="https://lakphy.github.io/blog/2020/08/20/%E8%81%94%E6%83%B3-YOGA-14S-%E5%BC%80%E7%AE%B1%E8%AF%84%E6%B5%8B/"/>
    <id>https://lakphy.github.io/blog/2020/08/20/%E8%81%94%E6%83%B3-YOGA-14S-%E5%BC%80%E7%AE%B1%E8%AF%84%E6%B5%8B/</id>
    <published>2020-08-20T02:14:43.000Z</published>
    <updated>2022-07-19T12:11:59.452Z</updated>
    
    <content type="html"><![CDATA[<p>联想YOGA 14S这款电脑被联想鸽了又鸽，改了又改，但性价比还是很高，我于八月初买了这台笔记本<br><a href="https://item.m.jd.com/product/53673115658.html?wxa_abtest=o&gx=RnFhkmFZaDGLy9RJ_t83BYE&ad_od=share&utm_source=androidapp&utm_medium=appshare&utm_campaign=t_335139774&utm_term=CopyURL">京东链接</a></p><h1 id="先说说外观"><a href="#先说说外观" class="headerlink" title="先说说外观"></a>先说说外观</h1><p>这款笔记本的ACD面是金属的，很有质感，用起来相当舒服，虽说没有联想的yoga系列本应该有的高端血统，但明显比联想的低端小新系列要强很多</p><p>180度展开图:<br><img src="2.jpg"><br>这里说明一下，官方并没有说过这机器支持180度展开，所以能不能完全180度展开这完全看命了</p><p>C面：键盘很有质感，很舒服<br><img src="3.jpg"></p><p>B面显示屏：高色域 60Hz 1080p<br><img src="4.jpg"></p><p>D面：<br><img src="5.jpg"></p><p>A面<br><img src="6.jpg"></p><p>侧面接口<br><img src="7.jpg"><br><img src="8.jpg"></p><h1 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h1><p>由于AMD的高性价比芯片，这款电脑整体性价比也非常高，我的购入价是5099，现在好像还涨价了</p><h3 id="芯片"><a href="#芯片" class="headerlink" title="芯片"></a>芯片</h3><p>联想YOGA 14S采用AMD锐龙R7 4800U芯片，8核16线程，7nm制程，无论是参数还是跑分，都算得上是今年上半年最强低压U了吧<br>8核16线程对我这种经常开一堆窗口的直男来说非常有用，7nm制程的耗电和发热都很低，就像我现在，用vscode码字，后台开文件管理器和chrome，D面基本感觉不到热，风扇我日常使用基本都不转。<br>但也有一点小缺点，就是在某些不支持多核加速的编译器上，单核性能明显不足，不过既然都低压U轻薄本了，还在乎它的编译速度吗？</p><h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>这款电脑使用的是集成显卡，显卡这方面确实拉跨，不过比英特尔的核显强这是肯定的，日常使用没啥问题，平时用ps时候偶尔会有些卡顿，玩游戏就。。。。<br>不过作为一个八辈子不玩电脑游戏，玩电脑游戏就打开赛尔号的憨憨，这确实影响没多大影响，我还是觉得电脑游戏没啥意思，不是说觉得电脑游戏做的烂，主要没那感觉，没有手游或者switch玩的顺手，以后我要想打游戏就玩手游，或者攒钱买个破解版3ds也够，电脑还是感觉不舒服。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>16GB 双通道 32bit 4266MHz频率 LPDDR4 内存，感觉这个配置相当不错，毕竟AMD的芯片比较吃内存频率，比起隔壁华为的2666，提升的不是一点半点。</p><h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>512GB硬盘，这个据说和首发有出入，不过满足使用</p><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><p>支持Wifi6好评</p><h3 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h3><p>联想祖传高色域屏好评</p><h3 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h3><p>60wh能用8h以上，对我这种从来不插电的人来说很方便。<br>使用65wPD快充，速度快，但发热比较大</p><h3 id="屏幕解锁"><a href="#屏幕解锁" class="headerlink" title="屏幕解锁"></a>屏幕解锁</h3><p>这款电脑不支持指纹解锁，但支持Windows Hello面部识别，我觉得Windows Hello比指纹识别更好用，很多小细节做的不错，比如注视不锁屏、离开锁屏、人体感知，这些做的不错，总之就这么说吧，Windows Hello配合开盖开机，我几乎没按过电源键，全都是自动操作。</p><h1 id="实际体验"><a href="#实际体验" class="headerlink" title="实际体验"></a>实际体验</h1><p>使用体验很不错，但16:10屏幕的效率确实不高，有钱建议买华为祖传3:2高色域2k触屏，那个更舒服</p><h1 id="槽点"><a href="#槽点" class="headerlink" title="槽点"></a>槽点</h1><h3 id="品控辣鸡"><a href="#品控辣鸡" class="headerlink" title="品控辣鸡"></a>品控辣鸡</h3><p>买之前就看见网上说品控不行，平均换货四五次，所以我从京东买的，毕竟京东售后比较好嘛<br>我换了一次货，因为部分键位是坏的，再发来时候虽然也不怎么如意，但不影响使用我就没再计较，应该也是通病</p><h4 id="1、转轴有点歪"><a href="#1、转轴有点歪" class="headerlink" title="1、转轴有点歪"></a>1、转轴有点歪</h4><p>这个就是偶尔看的时候有点难受，勉强接受吧</p><h4 id="2、屏幕油腻"><a href="#2、屏幕油腻" class="headerlink" title="2、屏幕油腻"></a>2、屏幕油腻</h4><p>这个倒是通病，近看会有油腻感觉，远看不影响<br><img src="9.jpg"></p><h4 id="3、键盘有磕碰"><a href="#3、键盘有磕碰" class="headerlink" title="3、键盘有磕碰"></a>3、键盘有磕碰</h4><p>这个应该是我这台自己问题了，但怕再换来问题更大的，就没换，反正不影响使用<br>看图吧：<br><img src="10.jpg"></p><h4 id="4、D面按压会响"><a href="#4、D面按压会响" class="headerlink" title="4、D面按压会响"></a>4、D面按压会响</h4><p><img src="11.jpg"><br>就是这种，按压会有响声</p><h4 id="5、屏幕弯曲"><a href="#5、屏幕弯曲" class="headerlink" title="5、屏幕弯曲"></a>5、屏幕弯曲</h4><p>这个应该是磁吸合盖的锅，合上盖时候，屏幕中间上下可以贴死，但两侧会翘起来一点，就像一本用了很长时间的日记本中间用绳子绑起来一样</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p><img src="12.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;联想YOGA 14S这款电脑被联想鸽了又鸽，改了又改，但性价比还是很高，我于八月初买了这台笔记本&lt;br&gt;&lt;a href=&quot;https://item.m.jd.com/product/53673115658.html?wxa_abtest=o&amp;gx=RnFhkmFZaDGLy</summary>
      
    
    
    
    
    <category term="开箱评测" scheme="https://lakphy.github.io/blog/tags/%E5%BC%80%E7%AE%B1%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>这个小米巨能写它香吗</title>
    <link href="https://lakphy.github.io/blog/2020/03/21/%E8%BF%99%E4%B8%AA%E5%B0%8F%E7%B1%B3%E5%B7%A8%E8%83%BD%E5%86%99%E5%AE%83%E9%A6%99%E5%90%97/"/>
    <id>https://lakphy.github.io/blog/2020/03/21/%E8%BF%99%E4%B8%AA%E5%B0%8F%E7%B1%B3%E5%B7%A8%E8%83%BD%E5%86%99%E5%AE%83%E9%A6%99%E5%90%97/</id>
    <published>2020-03-21T06:33:43.000Z</published>
    <updated>2022-07-19T12:11:59.602Z</updated>
    
    <content type="html"><![CDATA[<p>年前慕名买了一盒小米巨能写，小米之家现货一盒9.9十支，用来体验一下非常不错。<br>如果像我一样只想体验一下的话建议线下小米之家买，因为线上两盒起购，邮费十元，实在太坑。</p><h1 id="先看看官方说明"><a href="#先看看官方说明" class="headerlink" title="先看看官方说明"></a>先看看官方说明</h1><p> <a href="https://m.mi.com/commodity/detail/9836">小米商城链接</a><br>其实也没什么，就是一直强调便宜，油墨好，墨量大，就这三点，这里不引用官网大篇幅海报了</p><h1 id="评测"><a href="#评测" class="headerlink" title="评测"></a>评测</h1><p>我已使用巨能写很长时间，下面说一下体验</p><h2 id="流畅度"><a href="#流畅度" class="headerlink" title="流畅度"></a>流畅度</h2><p>巨能写的流畅度做的很不错，虽然和日本中性笔相比相差十万八千里，但在国产五元以下中性笔里可以说是无敌了（当然这里不考虑晨光优品那种偏科生，偏的不是一般偏，没法用）。</p><h2 id="悬空漏墨"><a href="#悬空漏墨" class="headerlink" title="悬空漏墨"></a>悬空漏墨</h2><p>就是说不盖笔帽，笔尖向下放置一段时间是否漏墨<br>这个方面做得还不错，完胜三菱UM100。<br>但是三菱UM100就这一个缺点啊。。。。。</p><h2 id="墨量"><a href="#墨量" class="headerlink" title="墨量"></a>墨量</h2><p>巨能写出墨略微有些冲，和三菱UM100一个量级的出墨，这个我喜欢</p><h2 id="耐摔"><a href="#耐摔" class="headerlink" title="耐摔"></a>耐摔</h2><p>巨能写非常不耐摔，笔尖摔过以后出墨量以及流畅度都有不同程度的影响，这种影响取决于摔笔时的作用力</p><h1 id="书写比较"><a href="#书写比较" class="headerlink" title="书写比较"></a>书写比较</h1><p>这里看张图吧<br><img src="5.jpg"><br>左列画圆圈对比<br>中列书写对比<br>右列墨水拖影对比</p><p>这里科普一下，画圈圈对比是我长期使用三菱UM100总结出来的判断笔尖好坏的方法，三菱UM100众所周知一摔就坏，通过画圈圈的方法可以找到损坏位置，然后避免书写时用损坏处，可以延长坏笔寿命。<br>还有墨水拖影这个是比较墨水色差，这个在百乐V系笔和三菱笔之间可以看出非常明显色差</p><h1 id="开箱图？"><a href="#开箱图？" class="headerlink" title="开箱图？"></a>开箱图？</h1><p><img src="2.jpg"><br><img src="3.jpg"><br><img src="1.jpg"><br><img src="4.jpg"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>小米巨能写性价比可以说无敌，但用途不广，它并不能替代我的三菱中性笔，尽管它足够便宜。它适用于对文字美观要求不高，对写字速度要求不高的场景，由于笔尖落后非常影响美观，另外使用时间长或者速度较快会有非常明显的疲劳感（官方说可以写一本圆周率，真是可怜小米实验室测试员工了）。在学习中，巨能写可以承担一些简单的工作，比如写练习册什么的，抄课文这个工程量大，会引起疲劳，如果财力不旺盛还是用巨能写好，但疲劳这个后果需要提前知道，另外考试可不能用巨能写，你的努力成果怎么能押在九毛九的笔身上，怎么说也得上个3块以上，我一般是5块的三菱um100（话说我刚入笔坑时候um100才3.5RMB啊）</p>]]></content>
    
    
    <summary type="html">小米巨能写评测</summary>
    
    
    
    
    <category term="中性笔" scheme="https://lakphy.github.io/blog/tags/%E4%B8%AD%E6%80%A7%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>muSpider__QQ音乐榜单下载器</title>
    <link href="https://lakphy.github.io/blog/2020/03/20/muSpider__QQ%E9%9F%B3%E4%B9%90%E6%A6%9C%E5%8D%95%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    <id>https://lakphy.github.io/blog/2020/03/20/muSpider__QQ%E9%9F%B3%E4%B9%90%E6%A6%9C%E5%8D%95%E4%B8%8B%E8%BD%BD%E5%99%A8/</id>
    <published>2020-03-20T12:48:37.000Z</published>
    <updated>2022-07-19T12:11:59.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于muSpider"><a href="#关于muSpider" class="headerlink" title="关于muSpider"></a>关于muSpider</h1><p>这是一个QQ音乐榜单爬取程序</p><p>包括付费音乐已经被隐藏的音乐，凡是在榜单上且QQ音乐服务器有存储的音乐都可以爬取</p><p>破解了时间和数量的限制</p><p>开源位置：</p><p><a href="https://github.com/lakphy/muSpider">muSpider仓库</a></p><p>声明： 仅供学习交流使用，转发请注明出处</p><p>为保证所有使用者利益，请控制使用频率！！！</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">快速开始</a></li><li><a href="#faq%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E7%AD%94">FAQ(常见问题及解答)</a></li><li><a href="#%E5%8F%AF%E4%BB%A5%E7%88%AC%E5%8F%96%E7%9A%84%E6%A6%9C%E5%8D%95">可以爬取的榜单</a></li><li><a href="#%E6%A6%9C%E5%8D%95%E9%80%82%E9%85%8D%E8%BF%9B%E5%BA%A6">榜单适配进度</a></li><li><a href="#%E5%8F%82%E4%B8%8E%E9%80%82%E9%85%8D%E6%A6%9C%E5%8D%95">参与适配榜单</a></li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="必要的准备"><a href="#必要的准备" class="headerlink" title="必要的准备"></a>必要的准备</h3><p>环境：Python</p><p>版本：&gt;=3.5</p><p>相关库安装：对于大部分用户，一般情况不需要安装多余的库</p><p>若您使用过程中出现了因缺少库产生的问题，尝试在 shell / cmd / Powershell 中运行以下命令以安装缺少的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip insatll urllib</span><br><span class="line">pip insatll time</span><br><span class="line">pip insatll requests</span><br><span class="line">pip install sys</span><br><span class="line">pip insatll os</span><br><span class="line">pip insatll datetime</span><br><span class="line">pip insatll random</span><br><span class="line">pip insatll pip</span><br></pre></td></tr></table></figure><h3 id="开始运行"><a href="#开始运行" class="headerlink" title="开始运行"></a>开始运行</h3><p>前往<a href="https://github.com/lakphy/muSpider">muSpider仓库</a>下载仓库zip文件(或克隆仓库)并解压</p><p>在文件所在目录打开 shell / cmd / Powershell 运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python music.py</span><br></pre></td></tr></table></figure><p>即可开始爬取QQ音乐榜单</p><h3 id="关于使用密码-此功能已废除"><a href="#关于使用密码-此功能已废除" class="headerlink" title="关于使用密码 (此功能已废除)"></a>关于使用密码 (此功能已废除)</h3><p>为防止被搬运，软件内设有动态密码验证，变化周期为小时</p><p>动态密码计算公式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="built_in">int</span>(datetime.date.today().strftime(<span class="string">&#x27;%y%m%d&#x27;</span>))%<span class="number">10</span>+(<span class="built_in">int</span>(datetime.date.today().strftime(<span class="string">&#x27;%y%m%d&#x27;</span>))%<span class="number">1000</span>-<span class="built_in">int</span>(datetime.date.today().strftime(<span class="string">&#x27;%y%m%d&#x27;</span>))%<span class="number">100</span>)/<span class="number">100</span>+(<span class="built_in">int</span>(datetime.date.today().strftime(<span class="string">&#x27;%y%m%d&#x27;</span>))%<span class="number">100000</span>-first%<span class="number">10000</span>)/<span class="number">10000</span>))+<span class="built_in">str</span>(datetime.datetime.now().hour%<span class="number">10</span>)+<span class="built_in">str</span>((<span class="built_in">int</span>(datetime.date.today().strftime(<span class="string">&#x27;%y%m%d&#x27;</span>))%<span class="number">10</span>+datetime.datetime.now().hour%<span class="number">10</span>)%<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>公式解释：</p><p>密码为三个数字的组合，中间无间隔；</p><p>第一个数为 当前月份的个位数 + 当前日期的个位数 + 当前年份的个位数；</p><p>第二个数为 当前小时数的个位数</p><p>第三个数为 ( 当前小时的个位数 + 当前日期的个位数 ) 除以10的余数</p><h2 id="FAQ-常见问题及解答"><a href="#FAQ-常见问题及解答" class="headerlink" title="FAQ(常见问题及解答)"></a>FAQ(常见问题及解答)</h2><p>问：运行中间出现突然报错跳出？</p><p>答：可能是因为代理服务器不稳定或者您的网络不稳定所致，建议检测网络并重新打开程序</p><h2 id="可以爬取的榜单"><a href="#可以爬取的榜单" class="headerlink" title="可以爬取的榜单"></a>可以爬取的榜单</h2><ul><li><p><input checked="" disabled="" type="checkbox">  流行指数榜</p></li><li><p><input checked="" disabled="" type="checkbox">  欧美榜</p></li><li><p><input checked="" disabled="" type="checkbox">  内地榜</p></li><li><p><input checked="" disabled="" type="checkbox">  iTunes榜</p></li><li><p><input checked="" disabled="" type="checkbox">  香港地区榜</p></li><li><p><input checked="" disabled="" type="checkbox">  台湾地区榜</p></li><li><p><input checked="" disabled="" type="checkbox">  美国公告牌榜</p></li><li><p><input checked="" disabled="" type="checkbox">  英国UK榜</p></li><li><p><input checked="" disabled="" type="checkbox">  YouTube榜</p></li><li><p><input disabled="" type="checkbox">  抖音排行榜</p></li><li><p><input disabled="" type="checkbox">  网络歌曲榜</p></li><li><p><input disabled="" type="checkbox">  电音榜</p></li><li><p><input disabled="" type="checkbox">  说唱榜</p></li><li><p><input disabled="" type="checkbox">  ACG新歌榜</p></li><li><p><input disabled="" type="checkbox">  达人音乐榜</p></li><li><p><input disabled="" type="checkbox">  K歌金曲榜</p></li><li><p><input disabled="" type="checkbox">  JOOX本地热播榜</p></li><li><p><input disabled="" type="checkbox">  台湾KKBOX榜</p></li></ul><h2 id="榜单适配进度"><a href="#榜单适配进度" class="headerlink" title="榜单适配进度"></a>榜单适配进度</h2><p>由于每个榜单的爬取规则不同，请求参数不同，所以需要人工适配每一个榜单，工作量不小</p><p>学业繁忙，无法全部适配，望谅解</p><h2 id="参与适配榜单"><a href="#参与适配榜单" class="headerlink" title="参与适配榜单"></a>参与适配榜单</h2><p>您不需要会编程即可参与适配</p><p>如果想要参与适配，您需要具备以下能力：</p><ul><li>会进行网络抓包</li><li>能够分析抓包内容</li></ul><p>仅需要这两样能力，您便可以贡献适配榜单</p><p>目前，我可以为您提供以下信息以减轻贡献适配榜单的工作量：</p><ul><li>目标网页 <a href="https://y.qq.com/n/yqq/toplist/4.html">https://y.qq.com/n/yqq/toplist/4.html</a></li><li>包含榜单音乐id的文件为 musicu.fcg文件</li><li>上述大约在网页打开后3000-5000ms内出现</li></ul><p>贡献者需要向我提供以下内容</p><ul><li>请求url及参数</li><li>返回内容分析方法</li></ul><p>贡献方式</p><ol><li><p>通过邮箱发给我，可以在<a href="https://lakphy.github.io/">我的网站</a>找到我的邮箱</p></li><li><p>在仓库下发布 issue</p></li><li><p>通过各种可以联系到我本人的方式</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于muSpider&quot;&gt;&lt;a href=&quot;#关于muSpider&quot; class=&quot;headerlink&quot; title=&quot;关于muSpider&quot;&gt;&lt;/a&gt;关于muSpider&lt;/h1&gt;&lt;p&gt;这是一个QQ音乐榜单爬取程序&lt;/p&gt;
&lt;p&gt;包括付费音乐已经被隐藏的音乐，凡</summary>
      
    
    
    
    
    <category term="Python" scheme="https://lakphy.github.io/blog/tags/Python/"/>
    
  </entry>
  
</feed>
